
Week09_USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d68  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  08004f08  08004f08  00014f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005588  08005588  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005588  08005588  00015588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005590  08005590  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005590  08005590  00015590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005594  08005594  00015594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000079c  20000078  08005610  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000814  08005610  00020814  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008da4  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001773  00000000  00000000  00028e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0002a5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  0002acb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015973  00000000  00000000  0002b328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008d63  00000000  00000000  00040c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085ec5  00000000  00000000  000499fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf8c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002054  00000000  00000000  000cf914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004ef0 	.word	0x08004ef0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08004ef0 	.word	0x08004ef0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f000 fd48 	bl	8001808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f830 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f000 f8ea 	bl	8000f54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d80:	f000 f8c0 	bl	8000f04 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d84:	f000 f894 	bl	8000eb0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  sprintf((char*)text, "-----Program Start-----\r\n-----Main Manu-----\r\n~Press 0 for LED CONTROL.\r\n~Press 1 for BUTTON STATUS.\r\n");
 8000d88:	4910      	ldr	r1, [pc, #64]	; (8000dcc <main+0x5c>)
 8000d8a:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <main+0x60>)
 8000d8c:	f003 fc42 	bl	8004614 <siprintf>
  HAL_UART_Transmit_DMA(&huart2, text, strlen((char*)text));
 8000d90:	480f      	ldr	r0, [pc, #60]	; (8000dd0 <main+0x60>)
 8000d92:	f7ff fa25 	bl	80001e0 <strlen>
 8000d96:	4603      	mov	r3, r0
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <main+0x60>)
 8000d9e:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <main+0x64>)
 8000da0:	f002 fa00 	bl	80031a4 <HAL_UART_Transmit_DMA>
//  sprintf((char*)text, "");
//  HAL_UART_Transmit_DMA(&huart2, text, strlen((char*)text));
  //print(text);
  UARTDMAConfig();
 8000da4:	f000 f944 	bl	8001030 <UARTDMAConfig>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //UARTPollingMethod();
	  static uint32_t timestampBt = 0;
	  	if(HAL_GetTick() >= timestampBt)
 8000da8:	f000 fd94 	bl	80018d4 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <main+0x68>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d3f8      	bcc.n	8000da8 <main+0x38>
		{
			timestampBt = HAL_GetTick() + 100;
 8000db6:	f000 fd8d 	bl	80018d4 <HAL_GetTick>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	3364      	adds	r3, #100	; 0x64
 8000dbe:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <main+0x68>)
 8000dc0:	6013      	str	r3, [r2, #0]
			DummyTask();
 8000dc2:	f000 fadd 	bl	8001380 <DummyTask>
			ButtonUpdate();
 8000dc6:	f000 fb6f 	bl	80014a8 <ButtonUpdate>
  {
 8000dca:	e7ed      	b.n	8000da8 <main+0x38>
 8000dcc:	08004f08 	.word	0x08004f08
 8000dd0:	20000214 	.word	0x20000214
 8000dd4:	20000094 	.word	0x20000094
 8000dd8:	200007f4 	.word	0x200007f4

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	; 0x50
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 0320 	add.w	r3, r7, #32
 8000de6:	2230      	movs	r2, #48	; 0x30
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 fc0a 	bl	8004604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <SystemClock_Config+0xcc>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	4a27      	ldr	r2, [pc, #156]	; (8000ea8 <SystemClock_Config+0xcc>)
 8000e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e10:	4b25      	ldr	r3, [pc, #148]	; (8000ea8 <SystemClock_Config+0xcc>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	4b22      	ldr	r3, [pc, #136]	; (8000eac <SystemClock_Config+0xd0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a21      	ldr	r2, [pc, #132]	; (8000eac <SystemClock_Config+0xd0>)
 8000e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <SystemClock_Config+0xd0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e40:	2310      	movs	r3, #16
 8000e42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e44:	2302      	movs	r3, #2
 8000e46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e4c:	2310      	movs	r3, #16
 8000e4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e50:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e56:	2304      	movs	r3, #4
 8000e58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5e:	f107 0320 	add.w	r3, r7, #32
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fc26 	bl	80026b4 <HAL_RCC_OscConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e6e:	f000 fb2d 	bl	80014cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e72:	230f      	movs	r3, #15
 8000e74:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e76:	2302      	movs	r3, #2
 8000e78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e82:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fe88 	bl	8002ba4 <HAL_RCC_ClockConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e9a:	f000 fb17 	bl	80014cc <Error_Handler>
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	3750      	adds	r7, #80	; 0x50
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40007000 	.word	0x40007000

08000eb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <MX_USART2_UART_Init+0x4c>)
 8000eb6:	4a12      	ldr	r2, [pc, #72]	; (8000f00 <MX_USART2_UART_Init+0x50>)
 8000eb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ebc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000ec0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_USART2_UART_Init+0x4c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <MX_USART2_UART_Init+0x4c>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ee6:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_USART2_UART_Init+0x4c>)
 8000ee8:	f002 f87c 	bl	8002fe4 <HAL_UART_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ef2:	f000 faeb 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000094 	.word	0x20000094
 8000f00:	40004400 	.word	0x40004400

08000f04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <MX_DMA_Init+0x4c>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <MX_DMA_Init+0x4c>)
 8000f14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <MX_DMA_Init+0x4c>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2010      	movs	r0, #16
 8000f2c:	f000 fdb9 	bl	8001aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f30:	2010      	movs	r0, #16
 8000f32:	f000 fdd2 	bl	8001ada <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2011      	movs	r0, #17
 8000f3c:	f000 fdb1 	bl	8001aa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f40:	2011      	movs	r0, #17
 8000f42:	f000 fdca 	bl	8001ada <HAL_NVIC_EnableIRQ>

}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800

08000f54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b2d      	ldr	r3, [pc, #180]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a2c      	ldr	r2, [pc, #176]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b2a      	ldr	r3, [pc, #168]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b26      	ldr	r3, [pc, #152]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a25      	ldr	r2, [pc, #148]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b23      	ldr	r3, [pc, #140]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a17      	ldr	r2, [pc, #92]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <MX_GPIO_Init+0xd0>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2120      	movs	r1, #32
 8000fde:	4812      	ldr	r0, [pc, #72]	; (8001028 <MX_GPIO_Init+0xd4>)
 8000fe0:	f001 fb34 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480c      	ldr	r0, [pc, #48]	; (800102c <MX_GPIO_Init+0xd8>)
 8000ffc:	f001 f98a 	bl	8002314 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001000:	2320      	movs	r3, #32
 8001002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_GPIO_Init+0xd4>)
 8001018:	f001 f97c 	bl	8002314 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800101c:	bf00      	nop
 800101e:	3728      	adds	r7, #40	; 0x28
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40023800 	.word	0x40023800
 8001028:	40020000 	.word	0x40020000
 800102c:	40020800 	.word	0x40020800

08001030 <UARTDMAConfig>:
//		HAL_UART_Transmit(&huart2, TxBuffer, strlen((char*)TxBuffer), 10);
//	}
//}

void UARTDMAConfig()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
//	//Start UART in Interrupt mode
	//HAL_UART_Receive_IT(&huart2, RxBuffer, 10);

	//Start UART in DMA mode
	HAL_UART_Receive_DMA(&huart2, RxBuffer, 1);
 8001034:	2201      	movs	r2, #1
 8001036:	4903      	ldr	r1, [pc, #12]	; (8001044 <UARTDMAConfig+0x14>)
 8001038:	4803      	ldr	r0, [pc, #12]	; (8001048 <UARTDMAConfig+0x18>)
 800103a:	f002 f931 	bl	80032a0 <HAL_UART_Receive_DMA>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000198 	.word	0x20000198
 8001048:	20000094 	.word	0x20000094

0800104c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	if(huart == &huart2)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4aa7      	ldr	r2, [pc, #668]	; (80012f4 <HAL_UART_RxCpltCallback+0x2a8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	f040 8183 	bne.w	8001364 <HAL_UART_RxCpltCallback+0x318>
	{
		//Add str stop symbol \0 to the end of str
		RxBuffer[1] = '\0';
 800105e:	4ba6      	ldr	r3, [pc, #664]	; (80012f8 <HAL_UART_RxCpltCallback+0x2ac>)
 8001060:	2200      	movs	r2, #0
 8001062:	705a      	strb	r2, [r3, #1]

		//Return received chars
		sprintf((char*)TxBuffer, "Recieved Command: %s\r\n", RxBuffer);
 8001064:	4aa4      	ldr	r2, [pc, #656]	; (80012f8 <HAL_UART_RxCpltCallback+0x2ac>)
 8001066:	49a5      	ldr	r1, [pc, #660]	; (80012fc <HAL_UART_RxCpltCallback+0x2b0>)
 8001068:	48a5      	ldr	r0, [pc, #660]	; (8001300 <HAL_UART_RxCpltCallback+0x2b4>)
 800106a:	f003 fad3 	bl	8004614 <siprintf>
		HAL_UART_Transmit(&huart2, TxBuffer, strlen((char*)TxBuffer), 100);
 800106e:	48a4      	ldr	r0, [pc, #656]	; (8001300 <HAL_UART_RxCpltCallback+0x2b4>)
 8001070:	f7ff f8b6 	bl	80001e0 <strlen>
 8001074:	4603      	mov	r3, r0
 8001076:	b29a      	uxth	r2, r3
 8001078:	2364      	movs	r3, #100	; 0x64
 800107a:	49a1      	ldr	r1, [pc, #644]	; (8001300 <HAL_UART_RxCpltCallback+0x2b4>)
 800107c:	489d      	ldr	r0, [pc, #628]	; (80012f4 <HAL_UART_RxCpltCallback+0x2a8>)
 800107e:	f001 fffe 	bl	800307e <HAL_UART_Transmit>

		//Recall Recieved
		//HAL_UART_Receive_IT(&huart2, RxBuffer, 10);
		switch(processState)
 8001082:	4ba0      	ldr	r3, [pc, #640]	; (8001304 <HAL_UART_RxCpltCallback+0x2b8>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b02      	cmp	r3, #2
 8001088:	f000 811b 	beq.w	80012c2 <HAL_UART_RxCpltCallback+0x276>
 800108c:	2b02      	cmp	r3, #2
 800108e:	f300 816a 	bgt.w	8001366 <HAL_UART_RxCpltCallback+0x31a>
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <HAL_UART_RxCpltCallback+0x50>
 8001096:	2b01      	cmp	r3, #1
 8001098:	d041      	beq.n	800111e <HAL_UART_RxCpltCallback+0xd2>
				}

			break;
			}
	}
}
 800109a:	e164      	b.n	8001366 <HAL_UART_RxCpltCallback+0x31a>
				if(RxBuffer[0] == '0')
 800109c:	4b96      	ldr	r3, [pc, #600]	; (80012f8 <HAL_UART_RxCpltCallback+0x2ac>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b30      	cmp	r3, #48	; 0x30
 80010a2:	d111      	bne.n	80010c8 <HAL_UART_RxCpltCallback+0x7c>
					processState = LED_CONTROL;
 80010a4:	4b97      	ldr	r3, [pc, #604]	; (8001304 <HAL_UART_RxCpltCallback+0x2b8>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	701a      	strb	r2, [r3, #0]
					sprintf((char*)text, "MODE : LED_CONTROL\r\n~Press d for ON/OFF LED.\r\n~Press a for speed up 1 Hz.\r\n~Press s for slow down 1 Hz.\r\n~Press x for go BACK.\r\n");
 80010aa:	4997      	ldr	r1, [pc, #604]	; (8001308 <HAL_UART_RxCpltCallback+0x2bc>)
 80010ac:	4897      	ldr	r0, [pc, #604]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 80010ae:	f003 fab1 	bl	8004614 <siprintf>
					HAL_UART_Transmit_DMA(&huart2, text, strlen((char*)text));
 80010b2:	4896      	ldr	r0, [pc, #600]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 80010b4:	f7ff f894 	bl	80001e0 <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	461a      	mov	r2, r3
 80010be:	4993      	ldr	r1, [pc, #588]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 80010c0:	488c      	ldr	r0, [pc, #560]	; (80012f4 <HAL_UART_RxCpltCallback+0x2a8>)
 80010c2:	f002 f86f 	bl	80031a4 <HAL_UART_Transmit_DMA>
			break;
 80010c6:	e14e      	b.n	8001366 <HAL_UART_RxCpltCallback+0x31a>
				else if(RxBuffer[0] == '1')
 80010c8:	4b8b      	ldr	r3, [pc, #556]	; (80012f8 <HAL_UART_RxCpltCallback+0x2ac>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b31      	cmp	r3, #49	; 0x31
 80010ce:	d114      	bne.n	80010fa <HAL_UART_RxCpltCallback+0xae>
					processState = BUTTON_STATUS;
 80010d0:	4b8c      	ldr	r3, [pc, #560]	; (8001304 <HAL_UART_RxCpltCallback+0x2b8>)
 80010d2:	2202      	movs	r2, #2
 80010d4:	701a      	strb	r2, [r3, #0]
					sprintf((char*)text, "MODE : BUTTON_STATUS\r\n~Press x for go BACK.\r\n");
 80010d6:	498e      	ldr	r1, [pc, #568]	; (8001310 <HAL_UART_RxCpltCallback+0x2c4>)
 80010d8:	488c      	ldr	r0, [pc, #560]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 80010da:	f003 fa9b 	bl	8004614 <siprintf>
					HAL_UART_Transmit_DMA(&huart2, text, strlen((char*)text));
 80010de:	488b      	ldr	r0, [pc, #556]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 80010e0:	f7ff f87e 	bl	80001e0 <strlen>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	461a      	mov	r2, r3
 80010ea:	4988      	ldr	r1, [pc, #544]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 80010ec:	4881      	ldr	r0, [pc, #516]	; (80012f4 <HAL_UART_RxCpltCallback+0x2a8>)
 80010ee:	f002 f859 	bl	80031a4 <HAL_UART_Transmit_DMA>
					button1.Command = 1;
 80010f2:	4b88      	ldr	r3, [pc, #544]	; (8001314 <HAL_UART_RxCpltCallback+0x2c8>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
			break;
 80010f8:	e135      	b.n	8001366 <HAL_UART_RxCpltCallback+0x31a>
					sprintf((char*)text, "Not a command.\r\n");
 80010fa:	4987      	ldr	r1, [pc, #540]	; (8001318 <HAL_UART_RxCpltCallback+0x2cc>)
 80010fc:	4883      	ldr	r0, [pc, #524]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 80010fe:	f003 fa89 	bl	8004614 <siprintf>
					HAL_UART_Transmit_DMA(&huart2, text, strlen((char*)text));
 8001102:	4882      	ldr	r0, [pc, #520]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 8001104:	f7ff f86c 	bl	80001e0 <strlen>
 8001108:	4603      	mov	r3, r0
 800110a:	b29b      	uxth	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	497f      	ldr	r1, [pc, #508]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 8001110:	4878      	ldr	r0, [pc, #480]	; (80012f4 <HAL_UART_RxCpltCallback+0x2a8>)
 8001112:	f002 f847 	bl	80031a4 <HAL_UART_Transmit_DMA>
					processState = INIT;
 8001116:	4b7b      	ldr	r3, [pc, #492]	; (8001304 <HAL_UART_RxCpltCallback+0x2b8>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
			break;
 800111c:	e123      	b.n	8001366 <HAL_UART_RxCpltCallback+0x31a>
				if(RxBuffer[0] == 'x')
 800111e:	4b76      	ldr	r3, [pc, #472]	; (80012f8 <HAL_UART_RxCpltCallback+0x2ac>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b78      	cmp	r3, #120	; 0x78
 8001124:	d111      	bne.n	800114a <HAL_UART_RxCpltCallback+0xfe>
					processState = INIT;
 8001126:	4b77      	ldr	r3, [pc, #476]	; (8001304 <HAL_UART_RxCpltCallback+0x2b8>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
					sprintf((char*)text, "BACK\r\n--------------------\r\n-----Main Manu-----\r\n~Press 0 for LED CONTROL.\r\n~Press 1 for BUTTON STATUS.\r\n");
 800112c:	497b      	ldr	r1, [pc, #492]	; (800131c <HAL_UART_RxCpltCallback+0x2d0>)
 800112e:	4877      	ldr	r0, [pc, #476]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 8001130:	f003 fa70 	bl	8004614 <siprintf>
					HAL_UART_Transmit_DMA(&huart2, text, strlen((char*)text));
 8001134:	4875      	ldr	r0, [pc, #468]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 8001136:	f7ff f853 	bl	80001e0 <strlen>
 800113a:	4603      	mov	r3, r0
 800113c:	b29b      	uxth	r3, r3
 800113e:	461a      	mov	r2, r3
 8001140:	4972      	ldr	r1, [pc, #456]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 8001142:	486c      	ldr	r0, [pc, #432]	; (80012f4 <HAL_UART_RxCpltCallback+0x2a8>)
 8001144:	f002 f82e 	bl	80031a4 <HAL_UART_Transmit_DMA>
			break;
 8001148:	e10d      	b.n	8001366 <HAL_UART_RxCpltCallback+0x31a>
				else if(RxBuffer[0] == 'a')
 800114a:	4b6b      	ldr	r3, [pc, #428]	; (80012f8 <HAL_UART_RxCpltCallback+0x2ac>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b61      	cmp	r3, #97	; 0x61
 8001150:	d12a      	bne.n	80011a8 <HAL_UART_RxCpltCallback+0x15c>
					led.Frequency += 1;
 8001152:	4b73      	ldr	r3, [pc, #460]	; (8001320 <HAL_UART_RxCpltCallback+0x2d4>)
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800115c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001160:	4b6f      	ldr	r3, [pc, #444]	; (8001320 <HAL_UART_RxCpltCallback+0x2d4>)
 8001162:	edc3 7a00 	vstr	s15, [r3]
					dispF = led.Frequency;
 8001166:	4b6e      	ldr	r3, [pc, #440]	; (8001320 <HAL_UART_RxCpltCallback+0x2d4>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001170:	edc7 7a00 	vstr	s15, [r7]
 8001174:	783b      	ldrb	r3, [r7, #0]
 8001176:	b25a      	sxtb	r2, r3
 8001178:	4b6a      	ldr	r3, [pc, #424]	; (8001324 <HAL_UART_RxCpltCallback+0x2d8>)
 800117a:	701a      	strb	r2, [r3, #0]
					processState = LED_CONTROL;
 800117c:	4b61      	ldr	r3, [pc, #388]	; (8001304 <HAL_UART_RxCpltCallback+0x2b8>)
 800117e:	2201      	movs	r2, #1
 8001180:	701a      	strb	r2, [r3, #0]
					sprintf((char*)text, "LED Frequency +1 Hz\r\nCurrent Frequency = %d Hz.\r\n--------------------\r\nMODE : LED_CONTROL\r\n~Press d for ON/OFF LED.\r\n~Press a for speed up 1 Hz.\r\n~Press s for slow down 1 Hz.\r\n~Press x for go BACK.\r\n", dispF);
 8001182:	4b68      	ldr	r3, [pc, #416]	; (8001324 <HAL_UART_RxCpltCallback+0x2d8>)
 8001184:	f993 3000 	ldrsb.w	r3, [r3]
 8001188:	461a      	mov	r2, r3
 800118a:	4967      	ldr	r1, [pc, #412]	; (8001328 <HAL_UART_RxCpltCallback+0x2dc>)
 800118c:	485f      	ldr	r0, [pc, #380]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 800118e:	f003 fa41 	bl	8004614 <siprintf>
					HAL_UART_Transmit_DMA(&huart2, text, strlen((char*)text));
 8001192:	485e      	ldr	r0, [pc, #376]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 8001194:	f7ff f824 	bl	80001e0 <strlen>
 8001198:	4603      	mov	r3, r0
 800119a:	b29b      	uxth	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	495b      	ldr	r1, [pc, #364]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 80011a0:	4854      	ldr	r0, [pc, #336]	; (80012f4 <HAL_UART_RxCpltCallback+0x2a8>)
 80011a2:	f001 ffff 	bl	80031a4 <HAL_UART_Transmit_DMA>
			break;
 80011a6:	e0de      	b.n	8001366 <HAL_UART_RxCpltCallback+0x31a>
				else if(RxBuffer[0] == 's')
 80011a8:	4b53      	ldr	r3, [pc, #332]	; (80012f8 <HAL_UART_RxCpltCallback+0x2ac>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b73      	cmp	r3, #115	; 0x73
 80011ae:	d141      	bne.n	8001234 <HAL_UART_RxCpltCallback+0x1e8>
					if(led.Frequency > 0)
 80011b0:	4b5b      	ldr	r3, [pc, #364]	; (8001320 <HAL_UART_RxCpltCallback+0x2d4>)
 80011b2:	edd3 7a00 	vldr	s15, [r3]
 80011b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011be:	dd27      	ble.n	8001210 <HAL_UART_RxCpltCallback+0x1c4>
						led.Frequency -= 1;
 80011c0:	4b57      	ldr	r3, [pc, #348]	; (8001320 <HAL_UART_RxCpltCallback+0x2d4>)
 80011c2:	edd3 7a00 	vldr	s15, [r3]
 80011c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011ce:	4b54      	ldr	r3, [pc, #336]	; (8001320 <HAL_UART_RxCpltCallback+0x2d4>)
 80011d0:	edc3 7a00 	vstr	s15, [r3]
						dispF = led.Frequency;
 80011d4:	4b52      	ldr	r3, [pc, #328]	; (8001320 <HAL_UART_RxCpltCallback+0x2d4>)
 80011d6:	edd3 7a00 	vldr	s15, [r3]
 80011da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011de:	edc7 7a00 	vstr	s15, [r7]
 80011e2:	783b      	ldrb	r3, [r7, #0]
 80011e4:	b25a      	sxtb	r2, r3
 80011e6:	4b4f      	ldr	r3, [pc, #316]	; (8001324 <HAL_UART_RxCpltCallback+0x2d8>)
 80011e8:	701a      	strb	r2, [r3, #0]
						sprintf((char*)text, "LED Frequency -1 Hz\r\nCurrent Frequency = %d Hz.\r\n\r\n--------------------\r\nMODE : LED_CONTROL\r\n~Press d for ON/OFF LED.\r\n~Press a for speed up 1 Hz.\r\n~Press s for slow down 1 Hz.\r\n~Press x for go BACK.\r\n", dispF);
 80011ea:	4b4e      	ldr	r3, [pc, #312]	; (8001324 <HAL_UART_RxCpltCallback+0x2d8>)
 80011ec:	f993 3000 	ldrsb.w	r3, [r3]
 80011f0:	461a      	mov	r2, r3
 80011f2:	494e      	ldr	r1, [pc, #312]	; (800132c <HAL_UART_RxCpltCallback+0x2e0>)
 80011f4:	4845      	ldr	r0, [pc, #276]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 80011f6:	f003 fa0d 	bl	8004614 <siprintf>
						HAL_UART_Transmit_DMA(&huart2, text, strlen((char*)text));
 80011fa:	4844      	ldr	r0, [pc, #272]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 80011fc:	f7fe fff0 	bl	80001e0 <strlen>
 8001200:	4603      	mov	r3, r0
 8001202:	b29b      	uxth	r3, r3
 8001204:	461a      	mov	r2, r3
 8001206:	4941      	ldr	r1, [pc, #260]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 8001208:	483a      	ldr	r0, [pc, #232]	; (80012f4 <HAL_UART_RxCpltCallback+0x2a8>)
 800120a:	f001 ffcb 	bl	80031a4 <HAL_UART_Transmit_DMA>
 800120e:	e00d      	b.n	800122c <HAL_UART_RxCpltCallback+0x1e0>
						sprintf((char*)text, "Frequency can not less than zero.\r\n\r\n--------------------\r\nMODE : LED_CONTROL\r\n~Press d for ON/OFF LED.\r\n~Press a for speed up 1 Hz.\r\n~Press s for slow down 1 Hz.\r\n~Press x for go BACK.\r\n");
 8001210:	4947      	ldr	r1, [pc, #284]	; (8001330 <HAL_UART_RxCpltCallback+0x2e4>)
 8001212:	483e      	ldr	r0, [pc, #248]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 8001214:	f003 f9fe 	bl	8004614 <siprintf>
						HAL_UART_Transmit_DMA(&huart2, text, strlen((char*)text));
 8001218:	483c      	ldr	r0, [pc, #240]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 800121a:	f7fe ffe1 	bl	80001e0 <strlen>
 800121e:	4603      	mov	r3, r0
 8001220:	b29b      	uxth	r3, r3
 8001222:	461a      	mov	r2, r3
 8001224:	4939      	ldr	r1, [pc, #228]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 8001226:	4833      	ldr	r0, [pc, #204]	; (80012f4 <HAL_UART_RxCpltCallback+0x2a8>)
 8001228:	f001 ffbc 	bl	80031a4 <HAL_UART_Transmit_DMA>
					processState = LED_CONTROL;
 800122c:	4b35      	ldr	r3, [pc, #212]	; (8001304 <HAL_UART_RxCpltCallback+0x2b8>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
			break;
 8001232:	e098      	b.n	8001366 <HAL_UART_RxCpltCallback+0x31a>
				else if(RxBuffer[0] == 'd')
 8001234:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <HAL_UART_RxCpltCallback+0x2ac>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b64      	cmp	r3, #100	; 0x64
 800123a:	d130      	bne.n	800129e <HAL_UART_RxCpltCallback+0x252>
					if(led.OnOffStatus == 1)
 800123c:	4b38      	ldr	r3, [pc, #224]	; (8001320 <HAL_UART_RxCpltCallback+0x2d4>)
 800123e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d111      	bne.n	800126a <HAL_UART_RxCpltCallback+0x21e>
						led.OnOffStatus = 0;
 8001246:	4b36      	ldr	r3, [pc, #216]	; (8001320 <HAL_UART_RxCpltCallback+0x2d4>)
 8001248:	2200      	movs	r2, #0
 800124a:	711a      	strb	r2, [r3, #4]
						sprintf((char*)text, "LED : OFF\r\n--------------------\r\nMODE : LED_CONTROL\r\n~Press d for ON/OFF LED.\r\n~Press a for speed up 1 Hz.\r\n~Press s for slow down 1 Hz.\r\n~Press x for go BACK.\r\n");
 800124c:	4939      	ldr	r1, [pc, #228]	; (8001334 <HAL_UART_RxCpltCallback+0x2e8>)
 800124e:	482f      	ldr	r0, [pc, #188]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 8001250:	f003 f9e0 	bl	8004614 <siprintf>
						HAL_UART_Transmit_DMA(&huart2, text, strlen((char*)text));
 8001254:	482d      	ldr	r0, [pc, #180]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 8001256:	f7fe ffc3 	bl	80001e0 <strlen>
 800125a:	4603      	mov	r3, r0
 800125c:	b29b      	uxth	r3, r3
 800125e:	461a      	mov	r2, r3
 8001260:	492a      	ldr	r1, [pc, #168]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 8001262:	4824      	ldr	r0, [pc, #144]	; (80012f4 <HAL_UART_RxCpltCallback+0x2a8>)
 8001264:	f001 ff9e 	bl	80031a4 <HAL_UART_Transmit_DMA>
 8001268:	e015      	b.n	8001296 <HAL_UART_RxCpltCallback+0x24a>
					else if(led.OnOffStatus == 0)
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <HAL_UART_RxCpltCallback+0x2d4>)
 800126c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d110      	bne.n	8001296 <HAL_UART_RxCpltCallback+0x24a>
						led.OnOffStatus = 1;
 8001274:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <HAL_UART_RxCpltCallback+0x2d4>)
 8001276:	2201      	movs	r2, #1
 8001278:	711a      	strb	r2, [r3, #4]
						sprintf((char*)text, "LED : ON\r\n--------------------\r\nMODE : LED_CONTROL\r\n~Press d for ON/OFF LED.\r\n~Press a for speed up 1 Hz.\r\n~Press s for slow down 1 Hz.\r\n~Press x for go BACK.\r\n");
 800127a:	492f      	ldr	r1, [pc, #188]	; (8001338 <HAL_UART_RxCpltCallback+0x2ec>)
 800127c:	4823      	ldr	r0, [pc, #140]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 800127e:	f003 f9c9 	bl	8004614 <siprintf>
						HAL_UART_Transmit_DMA(&huart2, text, strlen((char*)text));
 8001282:	4822      	ldr	r0, [pc, #136]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 8001284:	f7fe ffac 	bl	80001e0 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	b29b      	uxth	r3, r3
 800128c:	461a      	mov	r2, r3
 800128e:	491f      	ldr	r1, [pc, #124]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 8001290:	4818      	ldr	r0, [pc, #96]	; (80012f4 <HAL_UART_RxCpltCallback+0x2a8>)
 8001292:	f001 ff87 	bl	80031a4 <HAL_UART_Transmit_DMA>
					processState = LED_CONTROL;
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_UART_RxCpltCallback+0x2b8>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
			break;
 800129c:	e063      	b.n	8001366 <HAL_UART_RxCpltCallback+0x31a>
					sprintf((char*)text, "Not a command.\r\n--------------------\r\nMODE : LED_CONTROL\r\n~Press d for ON/OFF LED.\r\n~Press a for speed up 1 Hz.\r\n~Press s for slow down 1 Hz.\r\n~Press x for go BACK.\r\n");
 800129e:	4927      	ldr	r1, [pc, #156]	; (800133c <HAL_UART_RxCpltCallback+0x2f0>)
 80012a0:	481a      	ldr	r0, [pc, #104]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 80012a2:	f003 f9b7 	bl	8004614 <siprintf>
					HAL_UART_Transmit_DMA(&huart2, text, strlen((char*)text));
 80012a6:	4819      	ldr	r0, [pc, #100]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 80012a8:	f7fe ff9a 	bl	80001e0 <strlen>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	4916      	ldr	r1, [pc, #88]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 80012b4:	480f      	ldr	r0, [pc, #60]	; (80012f4 <HAL_UART_RxCpltCallback+0x2a8>)
 80012b6:	f001 ff75 	bl	80031a4 <HAL_UART_Transmit_DMA>
					processState = LED_CONTROL;
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_UART_RxCpltCallback+0x2b8>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
			break;
 80012c0:	e051      	b.n	8001366 <HAL_UART_RxCpltCallback+0x31a>
				if(RxBuffer[0] == 'x')
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <HAL_UART_RxCpltCallback+0x2ac>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b78      	cmp	r3, #120	; 0x78
 80012c8:	d13a      	bne.n	8001340 <HAL_UART_RxCpltCallback+0x2f4>
					button1.Command = 0;
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_UART_RxCpltCallback+0x2c8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
					sprintf((char*)text, "BACK\r\n--------------------\r\n-----Main Manu-----\r\n~Press 0 for LED CONTROL.\r\n~Press 1 for BUTTON STATUS.\r\n");
 80012d0:	4912      	ldr	r1, [pc, #72]	; (800131c <HAL_UART_RxCpltCallback+0x2d0>)
 80012d2:	480e      	ldr	r0, [pc, #56]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 80012d4:	f003 f99e 	bl	8004614 <siprintf>
					HAL_UART_Transmit_DMA(&huart2, text, strlen((char*)text));
 80012d8:	480c      	ldr	r0, [pc, #48]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 80012da:	f7fe ff81 	bl	80001e0 <strlen>
 80012de:	4603      	mov	r3, r0
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	4909      	ldr	r1, [pc, #36]	; (800130c <HAL_UART_RxCpltCallback+0x2c0>)
 80012e6:	4803      	ldr	r0, [pc, #12]	; (80012f4 <HAL_UART_RxCpltCallback+0x2a8>)
 80012e8:	f001 ff5c 	bl	80031a4 <HAL_UART_Transmit_DMA>
					processState = INIT;
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_UART_RxCpltCallback+0x2b8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
			break;
 80012f2:	e038      	b.n	8001366 <HAL_UART_RxCpltCallback+0x31a>
 80012f4:	20000094 	.word	0x20000094
 80012f8:	20000198 	.word	0x20000198
 80012fc:	08004f70 	.word	0x08004f70
 8001300:	200001ac 	.word	0x200001ac
 8001304:	20000210 	.word	0x20000210
 8001308:	08004f88 	.word	0x08004f88
 800130c:	20000214 	.word	0x20000214
 8001310:	0800500c 	.word	0x0800500c
 8001314:	200007f0 	.word	0x200007f0
 8001318:	0800503c 	.word	0x0800503c
 800131c:	08005050 	.word	0x08005050
 8001320:	20000000 	.word	0x20000000
 8001324:	200007f2 	.word	0x200007f2
 8001328:	080050bc 	.word	0x080050bc
 800132c:	08005184 	.word	0x08005184
 8001330:	08005250 	.word	0x08005250
 8001334:	0800530c 	.word	0x0800530c
 8001338:	080053b0 	.word	0x080053b0
 800133c:	08005454 	.word	0x08005454
					sprintf((char*)text, "Not a command.\r\n");
 8001340:	490b      	ldr	r1, [pc, #44]	; (8001370 <HAL_UART_RxCpltCallback+0x324>)
 8001342:	480c      	ldr	r0, [pc, #48]	; (8001374 <HAL_UART_RxCpltCallback+0x328>)
 8001344:	f003 f966 	bl	8004614 <siprintf>
					HAL_UART_Transmit_DMA(&huart2, text, strlen((char*)text));
 8001348:	480a      	ldr	r0, [pc, #40]	; (8001374 <HAL_UART_RxCpltCallback+0x328>)
 800134a:	f7fe ff49 	bl	80001e0 <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	b29b      	uxth	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	4907      	ldr	r1, [pc, #28]	; (8001374 <HAL_UART_RxCpltCallback+0x328>)
 8001356:	4808      	ldr	r0, [pc, #32]	; (8001378 <HAL_UART_RxCpltCallback+0x32c>)
 8001358:	f001 ff24 	bl	80031a4 <HAL_UART_Transmit_DMA>
					processState = BUTTON_STATUS;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <HAL_UART_RxCpltCallback+0x330>)
 800135e:	2202      	movs	r2, #2
 8001360:	701a      	strb	r2, [r3, #0]
			break;
 8001362:	e000      	b.n	8001366 <HAL_UART_RxCpltCallback+0x31a>
	}
 8001364:	bf00      	nop
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	0800503c 	.word	0x0800503c
 8001374:	20000214 	.word	0x20000214
 8001378:	20000094 	.word	0x20000094
 800137c:	20000210 	.word	0x20000210

08001380 <DummyTask>:

void DummyTask()
{
 8001380:	b5b0      	push	{r4, r5, r7, lr}
 8001382:	af00      	add	r7, sp, #0

	if(button1.Command == 1 && button1.CurrentStatus == 1)
 8001384:	4b3e      	ldr	r3, [pc, #248]	; (8001480 <DummyTask+0x100>)
 8001386:	f993 3000 	ldrsb.w	r3, [r3]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d113      	bne.n	80013b6 <DummyTask+0x36>
 800138e:	4b3c      	ldr	r3, [pc, #240]	; (8001480 <DummyTask+0x100>)
 8001390:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d10e      	bne.n	80013b6 <DummyTask+0x36>
	{
		sprintf((char*)text, "Button Status : Unpress \r\n");
 8001398:	493a      	ldr	r1, [pc, #232]	; (8001484 <DummyTask+0x104>)
 800139a:	483b      	ldr	r0, [pc, #236]	; (8001488 <DummyTask+0x108>)
 800139c:	f003 f93a 	bl	8004614 <siprintf>
		HAL_UART_Transmit_DMA(&huart2, text, strlen((char*)text));
 80013a0:	4839      	ldr	r0, [pc, #228]	; (8001488 <DummyTask+0x108>)
 80013a2:	f7fe ff1d 	bl	80001e0 <strlen>
 80013a6:	4603      	mov	r3, r0
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	4936      	ldr	r1, [pc, #216]	; (8001488 <DummyTask+0x108>)
 80013ae:	4837      	ldr	r0, [pc, #220]	; (800148c <DummyTask+0x10c>)
 80013b0:	f001 fef8 	bl	80031a4 <HAL_UART_Transmit_DMA>
 80013b4:	e017      	b.n	80013e6 <DummyTask+0x66>
	}
	else if(button1.Command == 1 && button1.CurrentStatus == 0)
 80013b6:	4b32      	ldr	r3, [pc, #200]	; (8001480 <DummyTask+0x100>)
 80013b8:	f993 3000 	ldrsb.w	r3, [r3]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d112      	bne.n	80013e6 <DummyTask+0x66>
 80013c0:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <DummyTask+0x100>)
 80013c2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10d      	bne.n	80013e6 <DummyTask+0x66>
	{
		sprintf((char*)text, "Button Status : Press \r\n");
 80013ca:	4931      	ldr	r1, [pc, #196]	; (8001490 <DummyTask+0x110>)
 80013cc:	482e      	ldr	r0, [pc, #184]	; (8001488 <DummyTask+0x108>)
 80013ce:	f003 f921 	bl	8004614 <siprintf>
		HAL_UART_Transmit_DMA(&huart2, text, strlen((char*)text));
 80013d2:	482d      	ldr	r0, [pc, #180]	; (8001488 <DummyTask+0x108>)
 80013d4:	f7fe ff04 	bl	80001e0 <strlen>
 80013d8:	4603      	mov	r3, r0
 80013da:	b29b      	uxth	r3, r3
 80013dc:	461a      	mov	r2, r3
 80013de:	492a      	ldr	r1, [pc, #168]	; (8001488 <DummyTask+0x108>)
 80013e0:	482a      	ldr	r0, [pc, #168]	; (800148c <DummyTask+0x10c>)
 80013e2:	f001 fedf 	bl	80031a4 <HAL_UART_Transmit_DMA>
	}

	static uint32_t timestampLED = 0;
	if(led.OnOffStatus == 1)
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <DummyTask+0x114>)
 80013e8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d137      	bne.n	8001460 <DummyTask+0xe0>
	{
		//Blink LED 5 Hz
		if(HAL_GetTick() >= timestampLED)
 80013f0:	f000 fa70 	bl	80018d4 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b28      	ldr	r3, [pc, #160]	; (8001498 <DummyTask+0x118>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d33d      	bcc.n	800147a <DummyTask+0xfa>
		{
			timestampLED = HAL_GetTick() + (1.0/led.Frequency)*1000;
 80013fe:	f000 fa69 	bl	80018d4 <HAL_GetTick>
 8001402:	4603      	mov	r3, r0
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f885 	bl	8000514 <__aeabi_ui2d>
 800140a:	4604      	mov	r4, r0
 800140c:	460d      	mov	r5, r1
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <DummyTask+0x114>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f8a0 	bl	8000558 <__aeabi_f2d>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	f04f 0000 	mov.w	r0, #0
 8001420:	491e      	ldr	r1, [pc, #120]	; (800149c <DummyTask+0x11c>)
 8001422:	f7ff fa1b 	bl	800085c <__aeabi_ddiv>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <DummyTask+0x120>)
 8001434:	f7ff f8e8 	bl	8000608 <__aeabi_dmul>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4620      	mov	r0, r4
 800143e:	4629      	mov	r1, r5
 8001440:	f7fe ff2c 	bl	800029c <__adddf3>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff faee 	bl	8000a2c <__aeabi_d2uiz>
 8001450:	4603      	mov	r3, r0
 8001452:	4a11      	ldr	r2, [pc, #68]	; (8001498 <DummyTask+0x118>)
 8001454:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001456:	2120      	movs	r1, #32
 8001458:	4812      	ldr	r0, [pc, #72]	; (80014a4 <DummyTask+0x124>)
 800145a:	f001 f910 	bl	800267e <HAL_GPIO_TogglePin>
	else if(led.OnOffStatus == 0)
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
		timestampLED = 0;
	}
}
 800145e:	e00c      	b.n	800147a <DummyTask+0xfa>
	else if(led.OnOffStatus == 0)
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <DummyTask+0x114>)
 8001462:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d107      	bne.n	800147a <DummyTask+0xfa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2120      	movs	r1, #32
 800146e:	480d      	ldr	r0, [pc, #52]	; (80014a4 <DummyTask+0x124>)
 8001470:	f001 f8ec 	bl	800264c <HAL_GPIO_WritePin>
		timestampLED = 0;
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <DummyTask+0x118>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
}
 800147a:	bf00      	nop
 800147c:	bdb0      	pop	{r4, r5, r7, pc}
 800147e:	bf00      	nop
 8001480:	200007f0 	.word	0x200007f0
 8001484:	080054fc 	.word	0x080054fc
 8001488:	20000214 	.word	0x20000214
 800148c:	20000094 	.word	0x20000094
 8001490:	08005518 	.word	0x08005518
 8001494:	20000000 	.word	0x20000000
 8001498:	200007f8 	.word	0x200007f8
 800149c:	3ff00000 	.word	0x3ff00000
 80014a0:	408f4000 	.word	0x408f4000
 80014a4:	40020000 	.word	0x40020000

080014a8 <ButtonUpdate>:

void ButtonUpdate()
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	button1.CurrentStatus =  HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80014ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <ButtonUpdate+0x1c>)
 80014b2:	f001 f8b3 	bl	800261c <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b25a      	sxtb	r2, r3
 80014ba:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <ButtonUpdate+0x20>)
 80014bc:	705a      	strb	r2, [r3, #1]
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40020800 	.word	0x40020800
 80014c8:	200007f0 	.word	0x200007f0

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <Error_Handler+0x8>
	...

080014d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <HAL_MspInit+0x4c>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <HAL_MspInit+0x4c>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_MspInit+0x4c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <HAL_MspInit+0x4c>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a08      	ldr	r2, [pc, #32]	; (8001524 <HAL_MspInit+0x4c>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_MspInit+0x4c>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001516:	2007      	movs	r0, #7
 8001518:	f000 fab8 	bl	8001a8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800

08001528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a4c      	ldr	r2, [pc, #304]	; (8001678 <HAL_UART_MspInit+0x150>)
 8001546:	4293      	cmp	r3, r2
 8001548:	f040 8091 	bne.w	800166e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	4b4a      	ldr	r3, [pc, #296]	; (800167c <HAL_UART_MspInit+0x154>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	4a49      	ldr	r2, [pc, #292]	; (800167c <HAL_UART_MspInit+0x154>)
 8001556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155a:	6413      	str	r3, [r2, #64]	; 0x40
 800155c:	4b47      	ldr	r3, [pc, #284]	; (800167c <HAL_UART_MspInit+0x154>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	4b43      	ldr	r3, [pc, #268]	; (800167c <HAL_UART_MspInit+0x154>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	4a42      	ldr	r2, [pc, #264]	; (800167c <HAL_UART_MspInit+0x154>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6313      	str	r3, [r2, #48]	; 0x30
 8001578:	4b40      	ldr	r3, [pc, #256]	; (800167c <HAL_UART_MspInit+0x154>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001584:	230c      	movs	r3, #12
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001594:	2307      	movs	r3, #7
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4838      	ldr	r0, [pc, #224]	; (8001680 <HAL_UART_MspInit+0x158>)
 80015a0:	f000 feb8 	bl	8002314 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80015a4:	4b37      	ldr	r3, [pc, #220]	; (8001684 <HAL_UART_MspInit+0x15c>)
 80015a6:	4a38      	ldr	r2, [pc, #224]	; (8001688 <HAL_UART_MspInit+0x160>)
 80015a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80015aa:	4b36      	ldr	r3, [pc, #216]	; (8001684 <HAL_UART_MspInit+0x15c>)
 80015ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015b0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b2:	4b34      	ldr	r3, [pc, #208]	; (8001684 <HAL_UART_MspInit+0x15c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b8:	4b32      	ldr	r3, [pc, #200]	; (8001684 <HAL_UART_MspInit+0x15c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015be:	4b31      	ldr	r3, [pc, #196]	; (8001684 <HAL_UART_MspInit+0x15c>)
 80015c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c6:	4b2f      	ldr	r3, [pc, #188]	; (8001684 <HAL_UART_MspInit+0x15c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015cc:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <HAL_UART_MspInit+0x15c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80015d2:	4b2c      	ldr	r3, [pc, #176]	; (8001684 <HAL_UART_MspInit+0x15c>)
 80015d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015da:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <HAL_UART_MspInit+0x15c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015e0:	4b28      	ldr	r3, [pc, #160]	; (8001684 <HAL_UART_MspInit+0x15c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80015e6:	4827      	ldr	r0, [pc, #156]	; (8001684 <HAL_UART_MspInit+0x15c>)
 80015e8:	f000 fa92 	bl	8001b10 <HAL_DMA_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80015f2:	f7ff ff6b 	bl	80014cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a22      	ldr	r2, [pc, #136]	; (8001684 <HAL_UART_MspInit+0x15c>)
 80015fa:	639a      	str	r2, [r3, #56]	; 0x38
 80015fc:	4a21      	ldr	r2, [pc, #132]	; (8001684 <HAL_UART_MspInit+0x15c>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <HAL_UART_MspInit+0x164>)
 8001604:	4a22      	ldr	r2, [pc, #136]	; (8001690 <HAL_UART_MspInit+0x168>)
 8001606:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001608:	4b20      	ldr	r3, [pc, #128]	; (800168c <HAL_UART_MspInit+0x164>)
 800160a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800160e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001610:	4b1e      	ldr	r3, [pc, #120]	; (800168c <HAL_UART_MspInit+0x164>)
 8001612:	2240      	movs	r2, #64	; 0x40
 8001614:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <HAL_UART_MspInit+0x164>)
 8001618:	2200      	movs	r2, #0
 800161a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_UART_MspInit+0x164>)
 800161e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001622:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_UART_MspInit+0x164>)
 8001626:	2200      	movs	r2, #0
 8001628:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_UART_MspInit+0x164>)
 800162c:	2200      	movs	r2, #0
 800162e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_UART_MspInit+0x164>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_UART_MspInit+0x164>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <HAL_UART_MspInit+0x164>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001642:	4812      	ldr	r0, [pc, #72]	; (800168c <HAL_UART_MspInit+0x164>)
 8001644:	f000 fa64 	bl	8001b10 <HAL_DMA_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800164e:	f7ff ff3d 	bl	80014cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a0d      	ldr	r2, [pc, #52]	; (800168c <HAL_UART_MspInit+0x164>)
 8001656:	635a      	str	r2, [r3, #52]	; 0x34
 8001658:	4a0c      	ldr	r2, [pc, #48]	; (800168c <HAL_UART_MspInit+0x164>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	2026      	movs	r0, #38	; 0x26
 8001664:	f000 fa1d 	bl	8001aa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001668:	2026      	movs	r0, #38	; 0x26
 800166a:	f000 fa36 	bl	8001ada <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	; 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40004400 	.word	0x40004400
 800167c:	40023800 	.word	0x40023800
 8001680:	40020000 	.word	0x40020000
 8001684:	200000d8 	.word	0x200000d8
 8001688:	40026088 	.word	0x40026088
 800168c:	20000138 	.word	0x20000138
 8001690:	400260a0 	.word	0x400260a0

08001694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <NMI_Handler+0x4>

0800169a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <MemManage_Handler+0x4>

080016a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e0:	f000 f8e4 	bl	80018ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <DMA1_Stream5_IRQHandler+0x10>)
 80016ee:	f000 fba7 	bl	8001e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200000d8 	.word	0x200000d8

080016fc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <DMA1_Stream6_IRQHandler+0x10>)
 8001702:	f000 fb9d 	bl	8001e40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000138 	.word	0x20000138

08001710 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <USART2_IRQHandler+0x10>)
 8001716:	f001 fdf3 	bl	8003300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000094 	.word	0x20000094

08001724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <_sbrk+0x5c>)
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <_sbrk+0x60>)
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <_sbrk+0x64>)
 8001742:	4a12      	ldr	r2, [pc, #72]	; (800178c <_sbrk+0x68>)
 8001744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	429a      	cmp	r2, r3
 8001752:	d207      	bcs.n	8001764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001754:	f002 ff2c 	bl	80045b0 <__errno>
 8001758:	4603      	mov	r3, r0
 800175a:	220c      	movs	r2, #12
 800175c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	e009      	b.n	8001778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <_sbrk+0x64>)
 8001774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20020000 	.word	0x20020000
 8001784:	00000400 	.word	0x00000400
 8001788:	200007fc 	.word	0x200007fc
 800178c:	20000818 	.word	0x20000818

08001790 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <SystemInit+0x20>)
 8001796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <SystemInit+0x20>)
 800179c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017b8:	480d      	ldr	r0, [pc, #52]	; (80017f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ba:	490e      	ldr	r1, [pc, #56]	; (80017f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017bc:	4a0e      	ldr	r2, [pc, #56]	; (80017f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c0:	e002      	b.n	80017c8 <LoopCopyDataInit>

080017c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c6:	3304      	adds	r3, #4

080017c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017cc:	d3f9      	bcc.n	80017c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ce:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017d0:	4c0b      	ldr	r4, [pc, #44]	; (8001800 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d4:	e001      	b.n	80017da <LoopFillZerobss>

080017d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d8:	3204      	adds	r2, #4

080017da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017dc:	d3fb      	bcc.n	80017d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017de:	f7ff ffd7 	bl	8001790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017e2:	f002 feeb 	bl	80045bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017e6:	f7ff fac3 	bl	8000d70 <main>
  bx  lr    
 80017ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80017f8:	08005598 	.word	0x08005598
  ldr r2, =_sbss
 80017fc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001800:	20000814 	.word	0x20000814

08001804 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001804:	e7fe      	b.n	8001804 <ADC_IRQHandler>
	...

08001808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800180c:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_Init+0x40>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <HAL_Init+0x40>)
 8001812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001816:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <HAL_Init+0x40>)
 800181e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001822:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a07      	ldr	r2, [pc, #28]	; (8001848 <HAL_Init+0x40>)
 800182a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800182e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001830:	2003      	movs	r0, #3
 8001832:	f000 f92b 	bl	8001a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001836:	2000      	movs	r0, #0
 8001838:	f000 f808 	bl	800184c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800183c:	f7ff fe4c 	bl	80014d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023c00 	.word	0x40023c00

0800184c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_InitTick+0x54>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_InitTick+0x58>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001862:	fbb3 f3f1 	udiv	r3, r3, r1
 8001866:	fbb2 f3f3 	udiv	r3, r2, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f943 	bl	8001af6 <HAL_SYSTICK_Config>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e00e      	b.n	8001898 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b0f      	cmp	r3, #15
 800187e:	d80a      	bhi.n	8001896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001880:	2200      	movs	r2, #0
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f000 f90b 	bl	8001aa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800188c:	4a06      	ldr	r2, [pc, #24]	; (80018a8 <HAL_InitTick+0x5c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e000      	b.n	8001898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000008 	.word	0x20000008
 80018a4:	20000010 	.word	0x20000010
 80018a8:	2000000c 	.word	0x2000000c

080018ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_IncTick+0x20>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <HAL_IncTick+0x24>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <HAL_IncTick+0x24>)
 80018be:	6013      	str	r3, [r2, #0]
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000010 	.word	0x20000010
 80018d0:	20000800 	.word	0x20000800

080018d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return uwTick;
 80018d8:	4b03      	ldr	r3, [pc, #12]	; (80018e8 <HAL_GetTick+0x14>)
 80018da:	681b      	ldr	r3, [r3, #0]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	20000800 	.word	0x20000800

080018ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001908:	4013      	ands	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001914:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191e:	4a04      	ldr	r2, [pc, #16]	; (8001930 <__NVIC_SetPriorityGrouping+0x44>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	60d3      	str	r3, [r2, #12]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001938:	4b04      	ldr	r3, [pc, #16]	; (800194c <__NVIC_GetPriorityGrouping+0x18>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	0a1b      	lsrs	r3, r3, #8
 800193e:	f003 0307 	and.w	r3, r3, #7
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	2b00      	cmp	r3, #0
 8001960:	db0b      	blt.n	800197a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	f003 021f 	and.w	r2, r3, #31
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <__NVIC_EnableIRQ+0x38>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	2001      	movs	r0, #1
 8001972:	fa00 f202 	lsl.w	r2, r0, r2
 8001976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000e100 	.word	0xe000e100

0800198c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0a      	blt.n	80019b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	490c      	ldr	r1, [pc, #48]	; (80019d8 <__NVIC_SetPriority+0x4c>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b4:	e00a      	b.n	80019cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4908      	ldr	r1, [pc, #32]	; (80019dc <__NVIC_SetPriority+0x50>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	3b04      	subs	r3, #4
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	761a      	strb	r2, [r3, #24]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000e100 	.word	0xe000e100
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	; 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	bf28      	it	cs
 80019fe:	2304      	movcs	r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3304      	adds	r3, #4
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d902      	bls.n	8001a10 <NVIC_EncodePriority+0x30>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	e000      	b.n	8001a12 <NVIC_EncodePriority+0x32>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	401a      	ands	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	4313      	orrs	r3, r2
         );
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3724      	adds	r7, #36	; 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a58:	d301      	bcc.n	8001a5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e00f      	b.n	8001a7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5e:	4a0a      	ldr	r2, [pc, #40]	; (8001a88 <SysTick_Config+0x40>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a66:	210f      	movs	r1, #15
 8001a68:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6c:	f7ff ff8e 	bl	800198c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <SysTick_Config+0x40>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a76:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <SysTick_Config+0x40>)
 8001a78:	2207      	movs	r2, #7
 8001a7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	e000e010 	.word	0xe000e010

08001a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff29 	bl	80018ec <__NVIC_SetPriorityGrouping>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab4:	f7ff ff3e 	bl	8001934 <__NVIC_GetPriorityGrouping>
 8001ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	6978      	ldr	r0, [r7, #20]
 8001ac0:	f7ff ff8e 	bl	80019e0 <NVIC_EncodePriority>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff5d 	bl	800198c <__NVIC_SetPriority>
}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff31 	bl	8001950 <__NVIC_EnableIRQ>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff ffa2 	bl	8001a48 <SysTick_Config>
 8001b04:	4603      	mov	r3, r0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b1c:	f7ff feda 	bl	80018d4 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e099      	b.n	8001c60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0201 	bic.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b4c:	e00f      	b.n	8001b6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b4e:	f7ff fec1 	bl	80018d4 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b05      	cmp	r3, #5
 8001b5a:	d908      	bls.n	8001b6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2220      	movs	r2, #32
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2203      	movs	r2, #3
 8001b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e078      	b.n	8001c60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1e8      	bne.n	8001b4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	4b38      	ldr	r3, [pc, #224]	; (8001c68 <HAL_DMA_Init+0x158>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d107      	bne.n	8001bd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f023 0307 	bic.w	r3, r3, #7
 8001bee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d117      	bne.n	8001c32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00e      	beq.n	8001c32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 fb01 	bl	800221c <DMA_CheckFifoParam>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d008      	beq.n	8001c32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2240      	movs	r2, #64	; 0x40
 8001c24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e016      	b.n	8001c60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fab8 	bl	80021b0 <DMA_CalcBaseAndBitshift>
 8001c40:	4603      	mov	r3, r0
 8001c42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c48:	223f      	movs	r2, #63	; 0x3f
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	f010803f 	.word	0xf010803f

08001c6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_DMA_Start_IT+0x26>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e040      	b.n	8001d14 <HAL_DMA_Start_IT+0xa8>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d12f      	bne.n	8001d06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2202      	movs	r2, #2
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 fa4a 	bl	8002154 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	223f      	movs	r2, #63	; 0x3f
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0216 	orr.w	r2, r2, #22
 8001cda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d007      	beq.n	8001cf4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0208 	orr.w	r2, r2, #8
 8001cf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	e005      	b.n	8001d12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d28:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d2a:	f7ff fdd3 	bl	80018d4 <HAL_GetTick>
 8001d2e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d008      	beq.n	8001d4e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e052      	b.n	8001df4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0216 	bic.w	r2, r2, #22
 8001d5c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d6c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d103      	bne.n	8001d7e <HAL_DMA_Abort+0x62>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0208 	bic.w	r2, r2, #8
 8001d8c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0201 	bic.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d9e:	e013      	b.n	8001dc8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001da0:	f7ff fd98 	bl	80018d4 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b05      	cmp	r3, #5
 8001dac:	d90c      	bls.n	8001dc8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2220      	movs	r2, #32
 8001db2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2203      	movs	r2, #3
 8001db8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e015      	b.n	8001df4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1e4      	bne.n	8001da0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dda:	223f      	movs	r2, #63	; 0x3f
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d004      	beq.n	8001e1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2280      	movs	r2, #128	; 0x80
 8001e14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00c      	b.n	8001e34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2205      	movs	r2, #5
 8001e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0201 	bic.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e4c:	4b8e      	ldr	r3, [pc, #568]	; (8002088 <HAL_DMA_IRQHandler+0x248>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a8e      	ldr	r2, [pc, #568]	; (800208c <HAL_DMA_IRQHandler+0x24c>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	0a9b      	lsrs	r3, r3, #10
 8001e58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4013      	ands	r3, r2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d01a      	beq.n	8001eac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d013      	beq.n	8001eac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0204 	bic.w	r2, r2, #4
 8001e92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e98:	2208      	movs	r2, #8
 8001e9a:	409a      	lsls	r2, r3
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea4:	f043 0201 	orr.w	r2, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	409a      	lsls	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d012      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00b      	beq.n	8001ee2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ece:	2201      	movs	r2, #1
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eda:	f043 0202 	orr.w	r2, r3, #2
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	2204      	movs	r2, #4
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d012      	beq.n	8001f18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00b      	beq.n	8001f18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	2204      	movs	r2, #4
 8001f06:	409a      	lsls	r2, r3
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f10:	f043 0204 	orr.w	r2, r3, #4
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d043      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d03c      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3a:	2210      	movs	r2, #16
 8001f3c:	409a      	lsls	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d018      	beq.n	8001f82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d108      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d024      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	4798      	blx	r3
 8001f6e:	e01f      	b.n	8001fb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01b      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	4798      	blx	r3
 8001f80:	e016      	b.n	8001fb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d107      	bne.n	8001fa0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f022 0208 	bic.w	r2, r2, #8
 8001f9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 808f 	beq.w	80020e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 8087 	beq.w	80020e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b05      	cmp	r3, #5
 8001fe8:	d136      	bne.n	8002058 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0216 	bic.w	r2, r2, #22
 8001ff8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002008:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2b00      	cmp	r3, #0
 8002010:	d103      	bne.n	800201a <HAL_DMA_IRQHandler+0x1da>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0208 	bic.w	r2, r2, #8
 8002028:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800202e:	223f      	movs	r2, #63	; 0x3f
 8002030:	409a      	lsls	r2, r3
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800204a:	2b00      	cmp	r3, #0
 800204c:	d07e      	beq.n	800214c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	4798      	blx	r3
        }
        return;
 8002056:	e079      	b.n	800214c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d01d      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10d      	bne.n	8002090 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	2b00      	cmp	r3, #0
 800207a:	d031      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	4798      	blx	r3
 8002084:	e02c      	b.n	80020e0 <HAL_DMA_IRQHandler+0x2a0>
 8002086:	bf00      	nop
 8002088:	20000008 	.word	0x20000008
 800208c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002094:	2b00      	cmp	r3, #0
 8002096:	d023      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	4798      	blx	r3
 80020a0:	e01e      	b.n	80020e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10f      	bne.n	80020d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0210 	bic.w	r2, r2, #16
 80020be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d032      	beq.n	800214e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d022      	beq.n	800213a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2205      	movs	r2, #5
 80020f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0201 	bic.w	r2, r2, #1
 800210a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	3301      	adds	r3, #1
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	429a      	cmp	r2, r3
 8002116:	d307      	bcc.n	8002128 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f2      	bne.n	800210c <HAL_DMA_IRQHandler+0x2cc>
 8002126:	e000      	b.n	800212a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002128:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	2b00      	cmp	r3, #0
 8002140:	d005      	beq.n	800214e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	4798      	blx	r3
 800214a:	e000      	b.n	800214e <HAL_DMA_IRQHandler+0x30e>
        return;
 800214c:	bf00      	nop
    }
  }
}
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
 8002160:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002170:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b40      	cmp	r3, #64	; 0x40
 8002180:	d108      	bne.n	8002194 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002192:	e007      	b.n	80021a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	60da      	str	r2, [r3, #12]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	3b10      	subs	r3, #16
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <DMA_CalcBaseAndBitshift+0x64>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	091b      	lsrs	r3, r3, #4
 80021c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021ca:	4a13      	ldr	r2, [pc, #76]	; (8002218 <DMA_CalcBaseAndBitshift+0x68>)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4413      	add	r3, r2
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d909      	bls.n	80021f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021e6:	f023 0303 	bic.w	r3, r3, #3
 80021ea:	1d1a      	adds	r2, r3, #4
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	659a      	str	r2, [r3, #88]	; 0x58
 80021f0:	e007      	b.n	8002202 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021fa:	f023 0303 	bic.w	r3, r3, #3
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	aaaaaaab 	.word	0xaaaaaaab
 8002218:	0800554c 	.word	0x0800554c

0800221c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d11f      	bne.n	8002276 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d856      	bhi.n	80022ea <DMA_CheckFifoParam+0xce>
 800223c:	a201      	add	r2, pc, #4	; (adr r2, 8002244 <DMA_CheckFifoParam+0x28>)
 800223e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002242:	bf00      	nop
 8002244:	08002255 	.word	0x08002255
 8002248:	08002267 	.word	0x08002267
 800224c:	08002255 	.word	0x08002255
 8002250:	080022eb 	.word	0x080022eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d046      	beq.n	80022ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002264:	e043      	b.n	80022ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800226e:	d140      	bne.n	80022f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002274:	e03d      	b.n	80022f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800227e:	d121      	bne.n	80022c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b03      	cmp	r3, #3
 8002284:	d837      	bhi.n	80022f6 <DMA_CheckFifoParam+0xda>
 8002286:	a201      	add	r2, pc, #4	; (adr r2, 800228c <DMA_CheckFifoParam+0x70>)
 8002288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228c:	0800229d 	.word	0x0800229d
 8002290:	080022a3 	.word	0x080022a3
 8002294:	0800229d 	.word	0x0800229d
 8002298:	080022b5 	.word	0x080022b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
      break;
 80022a0:	e030      	b.n	8002304 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d025      	beq.n	80022fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b2:	e022      	b.n	80022fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022bc:	d11f      	bne.n	80022fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022c2:	e01c      	b.n	80022fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d903      	bls.n	80022d2 <DMA_CheckFifoParam+0xb6>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d003      	beq.n	80022d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022d0:	e018      	b.n	8002304 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	73fb      	strb	r3, [r7, #15]
      break;
 80022d6:	e015      	b.n	8002304 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00e      	beq.n	8002302 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
      break;
 80022e8:	e00b      	b.n	8002302 <DMA_CheckFifoParam+0xe6>
      break;
 80022ea:	bf00      	nop
 80022ec:	e00a      	b.n	8002304 <DMA_CheckFifoParam+0xe8>
      break;
 80022ee:	bf00      	nop
 80022f0:	e008      	b.n	8002304 <DMA_CheckFifoParam+0xe8>
      break;
 80022f2:	bf00      	nop
 80022f4:	e006      	b.n	8002304 <DMA_CheckFifoParam+0xe8>
      break;
 80022f6:	bf00      	nop
 80022f8:	e004      	b.n	8002304 <DMA_CheckFifoParam+0xe8>
      break;
 80022fa:	bf00      	nop
 80022fc:	e002      	b.n	8002304 <DMA_CheckFifoParam+0xe8>
      break;   
 80022fe:	bf00      	nop
 8002300:	e000      	b.n	8002304 <DMA_CheckFifoParam+0xe8>
      break;
 8002302:	bf00      	nop
    }
  } 
  
  return status; 
 8002304:	7bfb      	ldrb	r3, [r7, #15]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop

08002314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002326:	2300      	movs	r3, #0
 8002328:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	e159      	b.n	80025e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002330:	2201      	movs	r2, #1
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4013      	ands	r3, r2
 8002342:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	429a      	cmp	r2, r3
 800234a:	f040 8148 	bne.w	80025de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d005      	beq.n	8002366 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002362:	2b02      	cmp	r3, #2
 8002364:	d130      	bne.n	80023c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	2203      	movs	r2, #3
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800239c:	2201      	movs	r2, #1
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	091b      	lsrs	r3, r3, #4
 80023b2:	f003 0201 	and.w	r2, r3, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d017      	beq.n	8002404 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2203      	movs	r2, #3
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b02      	cmp	r3, #2
 800240e:	d123      	bne.n	8002458 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	08da      	lsrs	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3208      	adds	r2, #8
 8002418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	220f      	movs	r2, #15
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	08da      	lsrs	r2, r3, #3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3208      	adds	r2, #8
 8002452:	69b9      	ldr	r1, [r7, #24]
 8002454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	2203      	movs	r2, #3
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0203 	and.w	r2, r3, #3
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80a2 	beq.w	80025de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	4b57      	ldr	r3, [pc, #348]	; (80025fc <HAL_GPIO_Init+0x2e8>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	4a56      	ldr	r2, [pc, #344]	; (80025fc <HAL_GPIO_Init+0x2e8>)
 80024a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a8:	6453      	str	r3, [r2, #68]	; 0x44
 80024aa:	4b54      	ldr	r3, [pc, #336]	; (80025fc <HAL_GPIO_Init+0x2e8>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024b6:	4a52      	ldr	r2, [pc, #328]	; (8002600 <HAL_GPIO_Init+0x2ec>)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	3302      	adds	r3, #2
 80024be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	220f      	movs	r2, #15
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a49      	ldr	r2, [pc, #292]	; (8002604 <HAL_GPIO_Init+0x2f0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d019      	beq.n	8002516 <HAL_GPIO_Init+0x202>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a48      	ldr	r2, [pc, #288]	; (8002608 <HAL_GPIO_Init+0x2f4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d013      	beq.n	8002512 <HAL_GPIO_Init+0x1fe>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a47      	ldr	r2, [pc, #284]	; (800260c <HAL_GPIO_Init+0x2f8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00d      	beq.n	800250e <HAL_GPIO_Init+0x1fa>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a46      	ldr	r2, [pc, #280]	; (8002610 <HAL_GPIO_Init+0x2fc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d007      	beq.n	800250a <HAL_GPIO_Init+0x1f6>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a45      	ldr	r2, [pc, #276]	; (8002614 <HAL_GPIO_Init+0x300>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_GPIO_Init+0x1f2>
 8002502:	2304      	movs	r3, #4
 8002504:	e008      	b.n	8002518 <HAL_GPIO_Init+0x204>
 8002506:	2307      	movs	r3, #7
 8002508:	e006      	b.n	8002518 <HAL_GPIO_Init+0x204>
 800250a:	2303      	movs	r3, #3
 800250c:	e004      	b.n	8002518 <HAL_GPIO_Init+0x204>
 800250e:	2302      	movs	r3, #2
 8002510:	e002      	b.n	8002518 <HAL_GPIO_Init+0x204>
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_GPIO_Init+0x204>
 8002516:	2300      	movs	r3, #0
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	f002 0203 	and.w	r2, r2, #3
 800251e:	0092      	lsls	r2, r2, #2
 8002520:	4093      	lsls	r3, r2
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002528:	4935      	ldr	r1, [pc, #212]	; (8002600 <HAL_GPIO_Init+0x2ec>)
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	089b      	lsrs	r3, r3, #2
 800252e:	3302      	adds	r3, #2
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002536:	4b38      	ldr	r3, [pc, #224]	; (8002618 <HAL_GPIO_Init+0x304>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800255a:	4a2f      	ldr	r2, [pc, #188]	; (8002618 <HAL_GPIO_Init+0x304>)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002560:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <HAL_GPIO_Init+0x304>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002584:	4a24      	ldr	r2, [pc, #144]	; (8002618 <HAL_GPIO_Init+0x304>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_GPIO_Init+0x304>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ae:	4a1a      	ldr	r2, [pc, #104]	; (8002618 <HAL_GPIO_Init+0x304>)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b4:	4b18      	ldr	r3, [pc, #96]	; (8002618 <HAL_GPIO_Init+0x304>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d003      	beq.n	80025d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025d8:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <HAL_GPIO_Init+0x304>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3301      	adds	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	2b0f      	cmp	r3, #15
 80025e8:	f67f aea2 	bls.w	8002330 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3724      	adds	r7, #36	; 0x24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	40013800 	.word	0x40013800
 8002604:	40020000 	.word	0x40020000
 8002608:	40020400 	.word	0x40020400
 800260c:	40020800 	.word	0x40020800
 8002610:	40020c00 	.word	0x40020c00
 8002614:	40021000 	.word	0x40021000
 8002618:	40013c00 	.word	0x40013c00

0800261c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	887b      	ldrh	r3, [r7, #2]
 800262e:	4013      	ands	r3, r2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002634:	2301      	movs	r3, #1
 8002636:	73fb      	strb	r3, [r7, #15]
 8002638:	e001      	b.n	800263e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800263a:	2300      	movs	r3, #0
 800263c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800263e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
 8002658:	4613      	mov	r3, r2
 800265a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002668:	e003      	b.n	8002672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	041a      	lsls	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800267e:	b480      	push	{r7}
 8002680:	b085      	sub	sp, #20
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	460b      	mov	r3, r1
 8002688:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002690:	887a      	ldrh	r2, [r7, #2]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4013      	ands	r3, r2
 8002696:	041a      	lsls	r2, r3, #16
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	43d9      	mvns	r1, r3
 800269c:	887b      	ldrh	r3, [r7, #2]
 800269e:	400b      	ands	r3, r1
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	bf00      	nop
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e267      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d075      	beq.n	80027be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026d2:	4b88      	ldr	r3, [pc, #544]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d00c      	beq.n	80026f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026de:	4b85      	ldr	r3, [pc, #532]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d112      	bne.n	8002710 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ea:	4b82      	ldr	r3, [pc, #520]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f6:	d10b      	bne.n	8002710 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	4b7e      	ldr	r3, [pc, #504]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d05b      	beq.n	80027bc <HAL_RCC_OscConfig+0x108>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d157      	bne.n	80027bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e242      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002718:	d106      	bne.n	8002728 <HAL_RCC_OscConfig+0x74>
 800271a:	4b76      	ldr	r3, [pc, #472]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a75      	ldr	r2, [pc, #468]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e01d      	b.n	8002764 <HAL_RCC_OscConfig+0xb0>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x98>
 8002732:	4b70      	ldr	r3, [pc, #448]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a6f      	ldr	r2, [pc, #444]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b6d      	ldr	r3, [pc, #436]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a6c      	ldr	r2, [pc, #432]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0xb0>
 800274c:	4b69      	ldr	r3, [pc, #420]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a68      	ldr	r2, [pc, #416]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b66      	ldr	r3, [pc, #408]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a65      	ldr	r2, [pc, #404]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 800275e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d013      	beq.n	8002794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7ff f8b2 	bl	80018d4 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002774:	f7ff f8ae 	bl	80018d4 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	; 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e207      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	4b5b      	ldr	r3, [pc, #364]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0xc0>
 8002792:	e014      	b.n	80027be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7ff f89e 	bl	80018d4 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279c:	f7ff f89a 	bl	80018d4 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	; 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e1f3      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	4b51      	ldr	r3, [pc, #324]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0xe8>
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d063      	beq.n	8002892 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ca:	4b4a      	ldr	r3, [pc, #296]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00b      	beq.n	80027ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d6:	4b47      	ldr	r3, [pc, #284]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d11c      	bne.n	800281c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e2:	4b44      	ldr	r3, [pc, #272]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d116      	bne.n	800281c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ee:	4b41      	ldr	r3, [pc, #260]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_RCC_OscConfig+0x152>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d001      	beq.n	8002806 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e1c7      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002806:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4937      	ldr	r1, [pc, #220]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281a:	e03a      	b.n	8002892 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d020      	beq.n	8002866 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002824:	4b34      	ldr	r3, [pc, #208]	; (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282a:	f7ff f853 	bl	80018d4 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002832:	f7ff f84f 	bl	80018d4 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e1a8      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002844:	4b2b      	ldr	r3, [pc, #172]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002850:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4925      	ldr	r1, [pc, #148]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002860:	4313      	orrs	r3, r2
 8002862:	600b      	str	r3, [r1, #0]
 8002864:	e015      	b.n	8002892 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7ff f832 	bl	80018d4 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002874:	f7ff f82e 	bl	80018d4 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e187      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002886:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d036      	beq.n	800290c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d016      	beq.n	80028d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_RCC_OscConfig+0x248>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ac:	f7ff f812 	bl	80018d4 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b4:	f7ff f80e 	bl	80018d4 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e167      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_RCC_OscConfig+0x240>)
 80028c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x200>
 80028d2:	e01b      	b.n	800290c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_RCC_OscConfig+0x248>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028da:	f7fe fffb 	bl	80018d4 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e0:	e00e      	b.n	8002900 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e2:	f7fe fff7 	bl	80018d4 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d907      	bls.n	8002900 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e150      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
 80028f4:	40023800 	.word	0x40023800
 80028f8:	42470000 	.word	0x42470000
 80028fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002900:	4b88      	ldr	r3, [pc, #544]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1ea      	bne.n	80028e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8097 	beq.w	8002a48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291a:	2300      	movs	r3, #0
 800291c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291e:	4b81      	ldr	r3, [pc, #516]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10f      	bne.n	800294a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	4b7d      	ldr	r3, [pc, #500]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	4a7c      	ldr	r2, [pc, #496]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002938:	6413      	str	r3, [r2, #64]	; 0x40
 800293a:	4b7a      	ldr	r3, [pc, #488]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002946:	2301      	movs	r3, #1
 8002948:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294a:	4b77      	ldr	r3, [pc, #476]	; (8002b28 <HAL_RCC_OscConfig+0x474>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d118      	bne.n	8002988 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002956:	4b74      	ldr	r3, [pc, #464]	; (8002b28 <HAL_RCC_OscConfig+0x474>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a73      	ldr	r2, [pc, #460]	; (8002b28 <HAL_RCC_OscConfig+0x474>)
 800295c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002962:	f7fe ffb7 	bl	80018d4 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296a:	f7fe ffb3 	bl	80018d4 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e10c      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297c:	4b6a      	ldr	r3, [pc, #424]	; (8002b28 <HAL_RCC_OscConfig+0x474>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d106      	bne.n	800299e <HAL_RCC_OscConfig+0x2ea>
 8002990:	4b64      	ldr	r3, [pc, #400]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	4a63      	ldr	r2, [pc, #396]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6713      	str	r3, [r2, #112]	; 0x70
 800299c:	e01c      	b.n	80029d8 <HAL_RCC_OscConfig+0x324>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2b05      	cmp	r3, #5
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x30c>
 80029a6:	4b5f      	ldr	r3, [pc, #380]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029aa:	4a5e      	ldr	r2, [pc, #376]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029ac:	f043 0304 	orr.w	r3, r3, #4
 80029b0:	6713      	str	r3, [r2, #112]	; 0x70
 80029b2:	4b5c      	ldr	r3, [pc, #368]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	4a5b      	ldr	r2, [pc, #364]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6713      	str	r3, [r2, #112]	; 0x70
 80029be:	e00b      	b.n	80029d8 <HAL_RCC_OscConfig+0x324>
 80029c0:	4b58      	ldr	r3, [pc, #352]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	4a57      	ldr	r2, [pc, #348]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029c6:	f023 0301 	bic.w	r3, r3, #1
 80029ca:	6713      	str	r3, [r2, #112]	; 0x70
 80029cc:	4b55      	ldr	r3, [pc, #340]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d0:	4a54      	ldr	r2, [pc, #336]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029d2:	f023 0304 	bic.w	r3, r3, #4
 80029d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d015      	beq.n	8002a0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e0:	f7fe ff78 	bl	80018d4 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e8:	f7fe ff74 	bl	80018d4 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e0cb      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fe:	4b49      	ldr	r3, [pc, #292]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0ee      	beq.n	80029e8 <HAL_RCC_OscConfig+0x334>
 8002a0a:	e014      	b.n	8002a36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0c:	f7fe ff62 	bl	80018d4 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a12:	e00a      	b.n	8002a2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a14:	f7fe ff5e 	bl	80018d4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e0b5      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2a:	4b3e      	ldr	r3, [pc, #248]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1ee      	bne.n	8002a14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a36:	7dfb      	ldrb	r3, [r7, #23]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d105      	bne.n	8002a48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3c:	4b39      	ldr	r3, [pc, #228]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	4a38      	ldr	r2, [pc, #224]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80a1 	beq.w	8002b94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a52:	4b34      	ldr	r3, [pc, #208]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d05c      	beq.n	8002b18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d141      	bne.n	8002aea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	4b31      	ldr	r3, [pc, #196]	; (8002b2c <HAL_RCC_OscConfig+0x478>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7fe ff32 	bl	80018d4 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fe ff2e 	bl	80018d4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e087      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a86:	4b27      	ldr	r3, [pc, #156]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	019b      	lsls	r3, r3, #6
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	085b      	lsrs	r3, r3, #1
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	041b      	lsls	r3, r3, #16
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	061b      	lsls	r3, r3, #24
 8002ab6:	491b      	ldr	r1, [pc, #108]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <HAL_RCC_OscConfig+0x478>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fe ff07 	bl	80018d4 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aca:	f7fe ff03 	bl	80018d4 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e05c      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002adc:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x416>
 8002ae8:	e054      	b.n	8002b94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <HAL_RCC_OscConfig+0x478>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fef0 	bl	80018d4 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fe feec 	bl	80018d4 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e045      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x444>
 8002b16:	e03d      	b.n	8002b94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e038      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <HAL_RCC_OscConfig+0x4ec>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d028      	beq.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d121      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d11a      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b60:	4013      	ands	r3, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d111      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	085b      	lsrs	r3, r3, #1
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800

08002ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0cc      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb8:	4b68      	ldr	r3, [pc, #416]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d90c      	bls.n	8002be0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc6:	4b65      	ldr	r3, [pc, #404]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bce:	4b63      	ldr	r3, [pc, #396]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0b8      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d020      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf8:	4b59      	ldr	r3, [pc, #356]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4a58      	ldr	r2, [pc, #352]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c10:	4b53      	ldr	r3, [pc, #332]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a52      	ldr	r2, [pc, #328]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1c:	4b50      	ldr	r3, [pc, #320]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	494d      	ldr	r1, [pc, #308]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d044      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d107      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	4b47      	ldr	r3, [pc, #284]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d119      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e07f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d003      	beq.n	8002c62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c62:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e06f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c72:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e067      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c82:	4b37      	ldr	r3, [pc, #220]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f023 0203 	bic.w	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4934      	ldr	r1, [pc, #208]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c94:	f7fe fe1e 	bl	80018d4 <HAL_GetTick>
 8002c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9a:	e00a      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9c:	f7fe fe1a 	bl	80018d4 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e04f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 020c 	and.w	r2, r3, #12
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d1eb      	bne.n	8002c9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d20c      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e032      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf8:	4b19      	ldr	r3, [pc, #100]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4916      	ldr	r1, [pc, #88]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d16:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	490e      	ldr	r1, [pc, #56]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d2a:	f000 f821 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	490a      	ldr	r1, [pc, #40]	; (8002d64 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	5ccb      	ldrb	r3, [r1, r3]
 8002d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d42:	4a09      	ldr	r2, [pc, #36]	; (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d46:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe fd7e 	bl	800184c <HAL_InitTick>

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023c00 	.word	0x40023c00
 8002d60:	40023800 	.word	0x40023800
 8002d64:	08005534 	.word	0x08005534
 8002d68:	20000008 	.word	0x20000008
 8002d6c:	2000000c 	.word	0x2000000c

08002d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d74:	b094      	sub	sp, #80	; 0x50
 8002d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d80:	2300      	movs	r3, #0
 8002d82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d88:	4b79      	ldr	r3, [pc, #484]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d00d      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x40>
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	f200 80e1 	bhi.w	8002f5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x34>
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d003      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0x3a>
 8002da2:	e0db      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4b73      	ldr	r3, [pc, #460]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002da6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002da8:	e0db      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002daa:	4b73      	ldr	r3, [pc, #460]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dae:	e0d8      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db0:	4b6f      	ldr	r3, [pc, #444]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dba:	4b6d      	ldr	r3, [pc, #436]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d063      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc6:	4b6a      	ldr	r3, [pc, #424]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	2200      	movs	r2, #0
 8002dce:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd8:	633b      	str	r3, [r7, #48]	; 0x30
 8002dda:	2300      	movs	r3, #0
 8002ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8002dde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002de2:	4622      	mov	r2, r4
 8002de4:	462b      	mov	r3, r5
 8002de6:	f04f 0000 	mov.w	r0, #0
 8002dea:	f04f 0100 	mov.w	r1, #0
 8002dee:	0159      	lsls	r1, r3, #5
 8002df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df4:	0150      	lsls	r0, r2, #5
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	1a51      	subs	r1, r2, r1
 8002dfe:	6139      	str	r1, [r7, #16]
 8002e00:	4629      	mov	r1, r5
 8002e02:	eb63 0301 	sbc.w	r3, r3, r1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e14:	4659      	mov	r1, fp
 8002e16:	018b      	lsls	r3, r1, #6
 8002e18:	4651      	mov	r1, sl
 8002e1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e1e:	4651      	mov	r1, sl
 8002e20:	018a      	lsls	r2, r1, #6
 8002e22:	4651      	mov	r1, sl
 8002e24:	ebb2 0801 	subs.w	r8, r2, r1
 8002e28:	4659      	mov	r1, fp
 8002e2a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e42:	4690      	mov	r8, r2
 8002e44:	4699      	mov	r9, r3
 8002e46:	4623      	mov	r3, r4
 8002e48:	eb18 0303 	adds.w	r3, r8, r3
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	462b      	mov	r3, r5
 8002e50:	eb49 0303 	adc.w	r3, r9, r3
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e62:	4629      	mov	r1, r5
 8002e64:	024b      	lsls	r3, r1, #9
 8002e66:	4621      	mov	r1, r4
 8002e68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	024a      	lsls	r2, r1, #9
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e76:	2200      	movs	r2, #0
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e80:	f7fd fdf4 	bl	8000a6c <__aeabi_uldivmod>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4613      	mov	r3, r2
 8002e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e8c:	e058      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8e:	4b38      	ldr	r3, [pc, #224]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	099b      	lsrs	r3, r3, #6
 8002e94:	2200      	movs	r2, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	4611      	mov	r1, r2
 8002e9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e9e:	623b      	str	r3, [r7, #32]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	464b      	mov	r3, r9
 8002eac:	f04f 0000 	mov.w	r0, #0
 8002eb0:	f04f 0100 	mov.w	r1, #0
 8002eb4:	0159      	lsls	r1, r3, #5
 8002eb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eba:	0150      	lsls	r0, r2, #5
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4641      	mov	r1, r8
 8002ec2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ed8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002edc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ee0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ee4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	00eb      	lsls	r3, r5, #3
 8002ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ef6:	00e2      	lsls	r2, r4, #3
 8002ef8:	4614      	mov	r4, r2
 8002efa:	461d      	mov	r5, r3
 8002efc:	4643      	mov	r3, r8
 8002efe:	18e3      	adds	r3, r4, r3
 8002f00:	603b      	str	r3, [r7, #0]
 8002f02:	464b      	mov	r3, r9
 8002f04:	eb45 0303 	adc.w	r3, r5, r3
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f16:	4629      	mov	r1, r5
 8002f18:	028b      	lsls	r3, r1, #10
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f20:	4621      	mov	r1, r4
 8002f22:	028a      	lsls	r2, r1, #10
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	61fa      	str	r2, [r7, #28]
 8002f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f34:	f7fd fd9a 	bl	8000a6c <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f5a:	e002      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3750      	adds	r7, #80	; 0x50
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	007a1200 	.word	0x007a1200

08002f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000008 	.word	0x20000008

08002f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f98:	f7ff fff0 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0a9b      	lsrs	r3, r3, #10
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4903      	ldr	r1, [pc, #12]	; (8002fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	08005544 	.word	0x08005544

08002fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fc0:	f7ff ffdc 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	0b5b      	lsrs	r3, r3, #13
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	4903      	ldr	r1, [pc, #12]	; (8002fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	08005544 	.word	0x08005544

08002fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e03f      	b.n	8003076 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fe fa8c 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2224      	movs	r2, #36	; 0x24
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68da      	ldr	r2, [r3, #12]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f001 f84d 	bl	80040c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	691a      	ldr	r2, [r3, #16]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800303c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800304c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800305c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b08a      	sub	sp, #40	; 0x28
 8003082:	af02      	add	r7, sp, #8
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	603b      	str	r3, [r7, #0]
 800308a:	4613      	mov	r3, r2
 800308c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b20      	cmp	r3, #32
 800309c:	d17c      	bne.n	8003198 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d002      	beq.n	80030aa <HAL_UART_Transmit+0x2c>
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e075      	b.n	800319a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_UART_Transmit+0x3e>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e06e      	b.n	800319a <HAL_UART_Transmit+0x11c>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2221      	movs	r2, #33	; 0x21
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030d2:	f7fe fbff 	bl	80018d4 <HAL_GetTick>
 80030d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	88fa      	ldrh	r2, [r7, #6]
 80030dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	88fa      	ldrh	r2, [r7, #6]
 80030e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ec:	d108      	bne.n	8003100 <HAL_UART_Transmit+0x82>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d104      	bne.n	8003100 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	e003      	b.n	8003108 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003104:	2300      	movs	r3, #0
 8003106:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003110:	e02a      	b.n	8003168 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2200      	movs	r2, #0
 800311a:	2180      	movs	r1, #128	; 0x80
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fd04 	bl	8003b2a <UART_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e036      	b.n	800319a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10b      	bne.n	800314a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003140:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	3302      	adds	r3, #2
 8003146:	61bb      	str	r3, [r7, #24]
 8003148:	e007      	b.n	800315a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	781a      	ldrb	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	3301      	adds	r3, #1
 8003158:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800316c:	b29b      	uxth	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1cf      	bne.n	8003112 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2200      	movs	r2, #0
 800317a:	2140      	movs	r1, #64	; 0x40
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fcd4 	bl	8003b2a <UART_WaitOnFlagUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e006      	b.n	800319a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	e000      	b.n	800319a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003198:	2302      	movs	r3, #2
  }
}
 800319a:	4618      	mov	r0, r3
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08c      	sub	sp, #48	; 0x30
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	4613      	mov	r3, r2
 80031b0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d165      	bne.n	800328a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_UART_Transmit_DMA+0x26>
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e05e      	b.n	800328c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_UART_Transmit_DMA+0x38>
 80031d8:	2302      	movs	r3, #2
 80031da:	e057      	b.n	800328c <HAL_UART_Transmit_DMA+0xe8>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	88fa      	ldrh	r2, [r7, #6]
 80031ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	88fa      	ldrh	r2, [r7, #6]
 80031f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2221      	movs	r2, #33	; 0x21
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003208:	4a22      	ldr	r2, [pc, #136]	; (8003294 <HAL_UART_Transmit_DMA+0xf0>)
 800320a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003210:	4a21      	ldr	r2, [pc, #132]	; (8003298 <HAL_UART_Transmit_DMA+0xf4>)
 8003212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003218:	4a20      	ldr	r2, [pc, #128]	; (800329c <HAL_UART_Transmit_DMA+0xf8>)
 800321a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003220:	2200      	movs	r2, #0
 8003222:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003224:	f107 0308 	add.w	r3, r7, #8
 8003228:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800322e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003230:	6819      	ldr	r1, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3304      	adds	r3, #4
 8003238:	461a      	mov	r2, r3
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	f7fe fd16 	bl	8001c6c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003248:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3314      	adds	r3, #20
 8003258:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	e853 3f00 	ldrex	r3, [r3]
 8003260:	617b      	str	r3, [r7, #20]
   return(result);
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003268:	62bb      	str	r3, [r7, #40]	; 0x28
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3314      	adds	r3, #20
 8003270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003272:	627a      	str	r2, [r7, #36]	; 0x24
 8003274:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003276:	6a39      	ldr	r1, [r7, #32]
 8003278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327a:	e841 2300 	strex	r3, r2, [r1]
 800327e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1e5      	bne.n	8003252 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	e000      	b.n	800328c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800328a:	2302      	movs	r3, #2
  }
}
 800328c:	4618      	mov	r0, r3
 800328e:	3730      	adds	r7, #48	; 0x30
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	08003885 	.word	0x08003885
 8003298:	0800391f 	.word	0x0800391f
 800329c:	08003a97 	.word	0x08003a97

080032a0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b20      	cmp	r3, #32
 80032b8:	d11d      	bne.n	80032f6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d002      	beq.n	80032c6 <HAL_UART_Receive_DMA+0x26>
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e016      	b.n	80032f8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_UART_Receive_DMA+0x38>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e00f      	b.n	80032f8 <HAL_UART_Receive_DMA+0x58>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	461a      	mov	r2, r3
 80032ea:	68b9      	ldr	r1, [r7, #8]
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 fc8b 	bl	8003c08 <UART_Start_Receive_DMA>
 80032f2:	4603      	mov	r3, r0
 80032f4:	e000      	b.n	80032f8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
  }
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b0ba      	sub	sp, #232	; 0xe8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003326:	2300      	movs	r3, #0
 8003328:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800332c:	2300      	movs	r3, #0
 800332e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800333e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10f      	bne.n	8003366 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_UART_IRQHandler+0x66>
 8003352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fdf7 	bl	8003f52 <UART_Receive_IT>
      return;
 8003364:	e256      	b.n	8003814 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003366:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 80de 	beq.w	800352c <HAL_UART_IRQHandler+0x22c>
 8003370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d106      	bne.n	800338a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800337c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003380:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80d1 	beq.w	800352c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800338a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00b      	beq.n	80033ae <HAL_UART_IRQHandler+0xae>
 8003396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f043 0201 	orr.w	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <HAL_UART_IRQHandler+0xd2>
 80033ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d005      	beq.n	80033d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	f043 0202 	orr.w	r2, r3, #2
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00b      	beq.n	80033f6 <HAL_UART_IRQHandler+0xf6>
 80033de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d005      	beq.n	80033f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f043 0204 	orr.w	r2, r3, #4
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80033f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d011      	beq.n	8003426 <HAL_UART_IRQHandler+0x126>
 8003402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003406:	f003 0320 	and.w	r3, r3, #32
 800340a:	2b00      	cmp	r3, #0
 800340c:	d105      	bne.n	800341a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800340e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d005      	beq.n	8003426 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	f043 0208 	orr.w	r2, r3, #8
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 81ed 	beq.w	800380a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_UART_IRQHandler+0x14e>
 800343c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fd82 	bl	8003f52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003458:	2b40      	cmp	r3, #64	; 0x40
 800345a:	bf0c      	ite	eq
 800345c:	2301      	moveq	r3, #1
 800345e:	2300      	movne	r3, #0
 8003460:	b2db      	uxtb	r3, r3
 8003462:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d103      	bne.n	800347a <HAL_UART_IRQHandler+0x17a>
 8003472:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003476:	2b00      	cmp	r3, #0
 8003478:	d04f      	beq.n	800351a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fc8a 	bl	8003d94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348a:	2b40      	cmp	r3, #64	; 0x40
 800348c:	d141      	bne.n	8003512 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3314      	adds	r3, #20
 8003494:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003498:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800349c:	e853 3f00 	ldrex	r3, [r3]
 80034a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80034a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80034a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3314      	adds	r3, #20
 80034b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80034d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1d9      	bne.n	800348e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d013      	beq.n	800350a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	4a7d      	ldr	r2, [pc, #500]	; (80036dc <HAL_UART_IRQHandler+0x3dc>)
 80034e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe fc84 	bl	8001dfc <HAL_DMA_Abort_IT>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d016      	beq.n	8003528 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003504:	4610      	mov	r0, r2
 8003506:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003508:	e00e      	b.n	8003528 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f9a4 	bl	8003858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003510:	e00a      	b.n	8003528 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f9a0 	bl	8003858 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003518:	e006      	b.n	8003528 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f99c 	bl	8003858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003526:	e170      	b.n	800380a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003528:	bf00      	nop
    return;
 800352a:	e16e      	b.n	800380a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	2b01      	cmp	r3, #1
 8003532:	f040 814a 	bne.w	80037ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 8143 	beq.w	80037ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003548:	f003 0310 	and.w	r3, r3, #16
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 813c 	beq.w	80037ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003552:	2300      	movs	r3, #0
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b40      	cmp	r3, #64	; 0x40
 8003574:	f040 80b4 	bne.w	80036e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003584:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 8140 	beq.w	800380e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003596:	429a      	cmp	r2, r3
 8003598:	f080 8139 	bcs.w	800380e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80035a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ae:	f000 8088 	beq.w	80036c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	330c      	adds	r3, #12
 80035b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035c0:	e853 3f00 	ldrex	r3, [r3]
 80035c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80035c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	330c      	adds	r3, #12
 80035da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80035de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80035e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80035ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80035ee:	e841 2300 	strex	r3, r2, [r1]
 80035f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80035f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1d9      	bne.n	80035b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3314      	adds	r3, #20
 8003604:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800360e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3314      	adds	r3, #20
 800361e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003622:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003626:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003628:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800362a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800362e:	e841 2300 	strex	r3, r2, [r1]
 8003632:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e1      	bne.n	80035fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3314      	adds	r3, #20
 8003640:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800364a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800364c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003650:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3314      	adds	r3, #20
 800365a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800365e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003660:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003662:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003664:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003666:	e841 2300 	strex	r3, r2, [r1]
 800366a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800366c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1e3      	bne.n	800363a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	330c      	adds	r3, #12
 8003686:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800368a:	e853 3f00 	ldrex	r3, [r3]
 800368e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003692:	f023 0310 	bic.w	r3, r3, #16
 8003696:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	330c      	adds	r3, #12
 80036a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80036a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80036a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80036aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036ac:	e841 2300 	strex	r3, r2, [r1]
 80036b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80036b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1e3      	bne.n	8003680 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fe fb2d 	bl	8001d1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	4619      	mov	r1, r3
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f8ca 	bl	800386c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036d8:	e099      	b.n	800380e <HAL_UART_IRQHandler+0x50e>
 80036da:	bf00      	nop
 80036dc:	08003e5b 	.word	0x08003e5b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 808b 	beq.w	8003812 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80036fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8086 	beq.w	8003812 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	330c      	adds	r3, #12
 800370c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003710:	e853 3f00 	ldrex	r3, [r3]
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800371c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	330c      	adds	r3, #12
 8003726:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800372a:	647a      	str	r2, [r7, #68]	; 0x44
 800372c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003730:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003732:	e841 2300 	strex	r3, r2, [r1]
 8003736:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1e3      	bne.n	8003706 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	3314      	adds	r3, #20
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	e853 3f00 	ldrex	r3, [r3]
 800374c:	623b      	str	r3, [r7, #32]
   return(result);
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	f023 0301 	bic.w	r3, r3, #1
 8003754:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3314      	adds	r3, #20
 800375e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003762:	633a      	str	r2, [r7, #48]	; 0x30
 8003764:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800376a:	e841 2300 	strex	r3, r2, [r1]
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e3      	bne.n	800373e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	330c      	adds	r3, #12
 800378a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	e853 3f00 	ldrex	r3, [r3]
 8003792:	60fb      	str	r3, [r7, #12]
   return(result);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0310 	bic.w	r3, r3, #16
 800379a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	330c      	adds	r3, #12
 80037a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80037a8:	61fa      	str	r2, [r7, #28]
 80037aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ac:	69b9      	ldr	r1, [r7, #24]
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	e841 2300 	strex	r3, r2, [r1]
 80037b4:	617b      	str	r3, [r7, #20]
   return(result);
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1e3      	bne.n	8003784 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037c0:	4619      	mov	r1, r3
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f852 	bl	800386c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037c8:	e023      	b.n	8003812 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d009      	beq.n	80037ea <HAL_UART_IRQHandler+0x4ea>
 80037d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fb4d 	bl	8003e82 <UART_Transmit_IT>
    return;
 80037e8:	e014      	b.n	8003814 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00e      	beq.n	8003814 <HAL_UART_IRQHandler+0x514>
 80037f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d008      	beq.n	8003814 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fb8d 	bl	8003f22 <UART_EndTransmit_IT>
    return;
 8003808:	e004      	b.n	8003814 <HAL_UART_IRQHandler+0x514>
    return;
 800380a:	bf00      	nop
 800380c:	e002      	b.n	8003814 <HAL_UART_IRQHandler+0x514>
      return;
 800380e:	bf00      	nop
 8003810:	e000      	b.n	8003814 <HAL_UART_IRQHandler+0x514>
      return;
 8003812:	bf00      	nop
  }
}
 8003814:	37e8      	adds	r7, #232	; 0xe8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop

0800381c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b090      	sub	sp, #64	; 0x40
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003890:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d137      	bne.n	8003910 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80038a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a2:	2200      	movs	r2, #0
 80038a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3314      	adds	r3, #20
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	623b      	str	r3, [r7, #32]
   return(result);
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80038be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3314      	adds	r3, #20
 80038c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038c6:	633a      	str	r2, [r7, #48]	; 0x30
 80038c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ce:	e841 2300 	strex	r3, r2, [r1]
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1e5      	bne.n	80038a6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	330c      	adds	r3, #12
 80038e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	e853 3f00 	ldrex	r3, [r3]
 80038e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
 80038f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	330c      	adds	r3, #12
 80038f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038fa:	61fa      	str	r2, [r7, #28]
 80038fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	69b9      	ldr	r1, [r7, #24]
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	617b      	str	r3, [r7, #20]
   return(result);
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e5      	bne.n	80038da <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800390e:	e002      	b.n	8003916 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003910:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003912:	f7ff ff83 	bl	800381c <HAL_UART_TxCpltCallback>
}
 8003916:	bf00      	nop
 8003918:	3740      	adds	r7, #64	; 0x40
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f7ff ff7f 	bl	8003830 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003932:	bf00      	nop
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b09c      	sub	sp, #112	; 0x70
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003946:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003952:	2b00      	cmp	r3, #0
 8003954:	d172      	bne.n	8003a3c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003958:	2200      	movs	r2, #0
 800395a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800395c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	330c      	adds	r3, #12
 8003962:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800396c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800396e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003972:	66bb      	str	r3, [r7, #104]	; 0x68
 8003974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330c      	adds	r3, #12
 800397a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800397c:	65ba      	str	r2, [r7, #88]	; 0x58
 800397e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003982:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800398a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e5      	bne.n	800395c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003990:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	3314      	adds	r3, #20
 8003996:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	667b      	str	r3, [r7, #100]	; 0x64
 80039a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3314      	adds	r3, #20
 80039ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80039b0:	647a      	str	r2, [r7, #68]	; 0x44
 80039b2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039b8:	e841 2300 	strex	r3, r2, [r1]
 80039bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e5      	bne.n	8003990 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3314      	adds	r3, #20
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	623b      	str	r3, [r7, #32]
   return(result);
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039da:	663b      	str	r3, [r7, #96]	; 0x60
 80039dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3314      	adds	r3, #20
 80039e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039e4:	633a      	str	r2, [r7, #48]	; 0x30
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e5      	bne.n	80039c4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d119      	bne.n	8003a3c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	330c      	adds	r3, #12
 8003a0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	e853 3f00 	ldrex	r3, [r3]
 8003a16:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0310 	bic.w	r3, r3, #16
 8003a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	330c      	adds	r3, #12
 8003a26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a28:	61fa      	str	r2, [r7, #28]
 8003a2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2c:	69b9      	ldr	r1, [r7, #24]
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	e841 2300 	strex	r3, r2, [r1]
 8003a34:	617b      	str	r3, [r7, #20]
   return(result);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e5      	bne.n	8003a08 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d106      	bne.n	8003a52 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a48:	4619      	mov	r1, r3
 8003a4a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a4c:	f7ff ff0e 	bl	800386c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a50:	e002      	b.n	8003a58 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003a52:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003a54:	f7fd fafa 	bl	800104c <HAL_UART_RxCpltCallback>
}
 8003a58:	bf00      	nop
 8003a5a:	3770      	adds	r7, #112	; 0x70
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d108      	bne.n	8003a88 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a7a:	085b      	lsrs	r3, r3, #1
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	4619      	mov	r1, r3
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f7ff fef3 	bl	800386c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a86:	e002      	b.n	8003a8e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f7ff fedb 	bl	8003844 <HAL_UART_RxHalfCpltCallback>
}
 8003a8e:	bf00      	nop
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab2:	2b80      	cmp	r3, #128	; 0x80
 8003ab4:	bf0c      	ite	eq
 8003ab6:	2301      	moveq	r3, #1
 8003ab8:	2300      	movne	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b21      	cmp	r3, #33	; 0x21
 8003ac8:	d108      	bne.n	8003adc <UART_DMAError+0x46>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003ad6:	68b8      	ldr	r0, [r7, #8]
 8003ad8:	f000 f934 	bl	8003d44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b40      	cmp	r3, #64	; 0x40
 8003ae8:	bf0c      	ite	eq
 8003aea:	2301      	moveq	r3, #1
 8003aec:	2300      	movne	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b22      	cmp	r3, #34	; 0x22
 8003afc:	d108      	bne.n	8003b10 <UART_DMAError+0x7a>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2200      	movs	r2, #0
 8003b08:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003b0a:	68b8      	ldr	r0, [r7, #8]
 8003b0c:	f000 f942 	bl	8003d94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	f043 0210 	orr.w	r2, r3, #16
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b1c:	68b8      	ldr	r0, [r7, #8]
 8003b1e:	f7ff fe9b 	bl	8003858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b090      	sub	sp, #64	; 0x40
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	603b      	str	r3, [r7, #0]
 8003b36:	4613      	mov	r3, r2
 8003b38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b3a:	e050      	b.n	8003bde <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b42:	d04c      	beq.n	8003bde <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b4a:	f7fd fec3 	bl	80018d4 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d241      	bcs.n	8003bde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	330c      	adds	r3, #12
 8003b60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	e853 3f00 	ldrex	r3, [r3]
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	330c      	adds	r3, #12
 8003b78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b7a:	637a      	str	r2, [r7, #52]	; 0x34
 8003b7c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e5      	bne.n	8003b5a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3314      	adds	r3, #20
 8003b94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3314      	adds	r3, #20
 8003bac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bae:	623a      	str	r2, [r7, #32]
 8003bb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb2:	69f9      	ldr	r1, [r7, #28]
 8003bb4:	6a3a      	ldr	r2, [r7, #32]
 8003bb6:	e841 2300 	strex	r3, r2, [r1]
 8003bba:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e5      	bne.n	8003b8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e00f      	b.n	8003bfe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4013      	ands	r3, r2
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	bf0c      	ite	eq
 8003bee:	2301      	moveq	r3, #1
 8003bf0:	2300      	movne	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d09f      	beq.n	8003b3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3740      	adds	r7, #64	; 0x40
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b098      	sub	sp, #96	; 0x60
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	4613      	mov	r3, r2
 8003c14:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	88fa      	ldrh	r2, [r7, #6]
 8003c20:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2222      	movs	r2, #34	; 0x22
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	4a40      	ldr	r2, [pc, #256]	; (8003d38 <UART_Start_Receive_DMA+0x130>)
 8003c36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	4a3f      	ldr	r2, [pc, #252]	; (8003d3c <UART_Start_Receive_DMA+0x134>)
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	4a3e      	ldr	r2, [pc, #248]	; (8003d40 <UART_Start_Receive_DMA+0x138>)
 8003c46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003c50:	f107 0308 	add.w	r3, r7, #8
 8003c54:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	88fb      	ldrh	r3, [r7, #6]
 8003c68:	f7fe f800 	bl	8001c6c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d019      	beq.n	8003cc6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	330c      	adds	r3, #12
 8003c98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	330c      	adds	r3, #12
 8003cb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cb2:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003cb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003cb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e5      	bne.n	8003c92 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3314      	adds	r3, #20
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	657b      	str	r3, [r7, #84]	; 0x54
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3314      	adds	r3, #20
 8003ce4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ce6:	63ba      	str	r2, [r7, #56]	; 0x38
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e5      	bne.n	8003cc6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3314      	adds	r3, #20
 8003d00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	617b      	str	r3, [r7, #20]
   return(result);
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d10:	653b      	str	r3, [r7, #80]	; 0x50
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3314      	adds	r3, #20
 8003d18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d1a:	627a      	str	r2, [r7, #36]	; 0x24
 8003d1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6a39      	ldr	r1, [r7, #32]
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e5      	bne.n	8003cfa <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3760      	adds	r7, #96	; 0x60
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	0800393b 	.word	0x0800393b
 8003d3c:	08003a61 	.word	0x08003a61
 8003d40:	08003a97 	.word	0x08003a97

08003d44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b089      	sub	sp, #36	; 0x24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	330c      	adds	r3, #12
 8003d52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	e853 3f00 	ldrex	r3, [r3]
 8003d5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003d62:	61fb      	str	r3, [r7, #28]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	61ba      	str	r2, [r7, #24]
 8003d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6979      	ldr	r1, [r7, #20]
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	613b      	str	r3, [r7, #16]
   return(result);
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e5      	bne.n	8003d4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003d88:	bf00      	nop
 8003d8a:	3724      	adds	r7, #36	; 0x24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b095      	sub	sp, #84	; 0x54
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	330c      	adds	r3, #12
 8003da2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	330c      	adds	r3, #12
 8003dba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dbc:	643a      	str	r2, [r7, #64]	; 0x40
 8003dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e5      	bne.n	8003d9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3314      	adds	r3, #20
 8003dd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f023 0301 	bic.w	r3, r3, #1
 8003de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3314      	adds	r3, #20
 8003dee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003df0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e5      	bne.n	8003dd0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d119      	bne.n	8003e40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	330c      	adds	r3, #12
 8003e12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f023 0310 	bic.w	r3, r3, #16
 8003e22:	647b      	str	r3, [r7, #68]	; 0x44
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	330c      	adds	r3, #12
 8003e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e2c:	61ba      	str	r2, [r7, #24]
 8003e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6979      	ldr	r1, [r7, #20]
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	613b      	str	r3, [r7, #16]
   return(result);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e5      	bne.n	8003e0c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e4e:	bf00      	nop
 8003e50:	3754      	adds	r7, #84	; 0x54
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b084      	sub	sp, #16
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f7ff fcef 	bl	8003858 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b085      	sub	sp, #20
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b21      	cmp	r3, #33	; 0x21
 8003e94:	d13e      	bne.n	8003f14 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9e:	d114      	bne.n	8003eca <UART_Transmit_IT+0x48>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d110      	bne.n	8003eca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ebc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	1c9a      	adds	r2, r3, #2
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	621a      	str	r2, [r3, #32]
 8003ec8:	e008      	b.n	8003edc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	1c59      	adds	r1, r3, #1
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	6211      	str	r1, [r2, #32]
 8003ed4:	781a      	ldrb	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	4619      	mov	r1, r3
 8003eea:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10f      	bne.n	8003f10 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003efe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f0e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e000      	b.n	8003f16 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f14:	2302      	movs	r3, #2
  }
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff fc6a 	bl	800381c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b08c      	sub	sp, #48	; 0x30
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b22      	cmp	r3, #34	; 0x22
 8003f64:	f040 80ab 	bne.w	80040be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f70:	d117      	bne.n	8003fa2 <UART_Receive_IT+0x50>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d113      	bne.n	8003fa2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	1c9a      	adds	r2, r3, #2
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8003fa0:	e026      	b.n	8003ff0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb4:	d007      	beq.n	8003fc6 <UART_Receive_IT+0x74>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <UART_Receive_IT+0x82>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	e008      	b.n	8003fe6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004000:	2b00      	cmp	r3, #0
 8004002:	d15a      	bne.n	80040ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0220 	bic.w	r2, r2, #32
 8004012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0201 	bic.w	r2, r2, #1
 8004032:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	2b01      	cmp	r3, #1
 8004042:	d135      	bne.n	80040b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	613b      	str	r3, [r7, #16]
   return(result);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f023 0310 	bic.w	r3, r3, #16
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	330c      	adds	r3, #12
 8004068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406a:	623a      	str	r2, [r7, #32]
 800406c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406e:	69f9      	ldr	r1, [r7, #28]
 8004070:	6a3a      	ldr	r2, [r7, #32]
 8004072:	e841 2300 	strex	r3, r2, [r1]
 8004076:	61bb      	str	r3, [r7, #24]
   return(result);
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1e5      	bne.n	800404a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b10      	cmp	r3, #16
 800408a:	d10a      	bne.n	80040a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040a6:	4619      	mov	r1, r3
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff fbdf 	bl	800386c <HAL_UARTEx_RxEventCallback>
 80040ae:	e002      	b.n	80040b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7fc ffcb 	bl	800104c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	e002      	b.n	80040c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e000      	b.n	80040c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80040be:	2302      	movs	r3, #2
  }
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3730      	adds	r7, #48	; 0x30
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040cc:	b0c0      	sub	sp, #256	; 0x100
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80040e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e4:	68d9      	ldr	r1, [r3, #12]
 80040e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	ea40 0301 	orr.w	r3, r0, r1
 80040f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	431a      	orrs	r2, r3
 8004100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	431a      	orrs	r2, r3
 8004108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004120:	f021 010c 	bic.w	r1, r1, #12
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800412e:	430b      	orrs	r3, r1
 8004130:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800413e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004142:	6999      	ldr	r1, [r3, #24]
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	ea40 0301 	orr.w	r3, r0, r1
 800414e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	4b8f      	ldr	r3, [pc, #572]	; (8004394 <UART_SetConfig+0x2cc>)
 8004158:	429a      	cmp	r2, r3
 800415a:	d005      	beq.n	8004168 <UART_SetConfig+0xa0>
 800415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4b8d      	ldr	r3, [pc, #564]	; (8004398 <UART_SetConfig+0x2d0>)
 8004164:	429a      	cmp	r2, r3
 8004166:	d104      	bne.n	8004172 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004168:	f7fe ff28 	bl	8002fbc <HAL_RCC_GetPCLK2Freq>
 800416c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004170:	e003      	b.n	800417a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004172:	f7fe ff0f 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8004176:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800417a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004184:	f040 810c 	bne.w	80043a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800418c:	2200      	movs	r2, #0
 800418e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004192:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004196:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800419a:	4622      	mov	r2, r4
 800419c:	462b      	mov	r3, r5
 800419e:	1891      	adds	r1, r2, r2
 80041a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80041a2:	415b      	adcs	r3, r3
 80041a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80041aa:	4621      	mov	r1, r4
 80041ac:	eb12 0801 	adds.w	r8, r2, r1
 80041b0:	4629      	mov	r1, r5
 80041b2:	eb43 0901 	adc.w	r9, r3, r1
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041ca:	4690      	mov	r8, r2
 80041cc:	4699      	mov	r9, r3
 80041ce:	4623      	mov	r3, r4
 80041d0:	eb18 0303 	adds.w	r3, r8, r3
 80041d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80041d8:	462b      	mov	r3, r5
 80041da:	eb49 0303 	adc.w	r3, r9, r3
 80041de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80041e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041f6:	460b      	mov	r3, r1
 80041f8:	18db      	adds	r3, r3, r3
 80041fa:	653b      	str	r3, [r7, #80]	; 0x50
 80041fc:	4613      	mov	r3, r2
 80041fe:	eb42 0303 	adc.w	r3, r2, r3
 8004202:	657b      	str	r3, [r7, #84]	; 0x54
 8004204:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004208:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800420c:	f7fc fc2e 	bl	8000a6c <__aeabi_uldivmod>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4b61      	ldr	r3, [pc, #388]	; (800439c <UART_SetConfig+0x2d4>)
 8004216:	fba3 2302 	umull	r2, r3, r3, r2
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	011c      	lsls	r4, r3, #4
 800421e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004222:	2200      	movs	r2, #0
 8004224:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004228:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800422c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004230:	4642      	mov	r2, r8
 8004232:	464b      	mov	r3, r9
 8004234:	1891      	adds	r1, r2, r2
 8004236:	64b9      	str	r1, [r7, #72]	; 0x48
 8004238:	415b      	adcs	r3, r3
 800423a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800423c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004240:	4641      	mov	r1, r8
 8004242:	eb12 0a01 	adds.w	sl, r2, r1
 8004246:	4649      	mov	r1, r9
 8004248:	eb43 0b01 	adc.w	fp, r3, r1
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004258:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800425c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004260:	4692      	mov	sl, r2
 8004262:	469b      	mov	fp, r3
 8004264:	4643      	mov	r3, r8
 8004266:	eb1a 0303 	adds.w	r3, sl, r3
 800426a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800426e:	464b      	mov	r3, r9
 8004270:	eb4b 0303 	adc.w	r3, fp, r3
 8004274:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004284:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004288:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800428c:	460b      	mov	r3, r1
 800428e:	18db      	adds	r3, r3, r3
 8004290:	643b      	str	r3, [r7, #64]	; 0x40
 8004292:	4613      	mov	r3, r2
 8004294:	eb42 0303 	adc.w	r3, r2, r3
 8004298:	647b      	str	r3, [r7, #68]	; 0x44
 800429a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800429e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80042a2:	f7fc fbe3 	bl	8000a6c <__aeabi_uldivmod>
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	4611      	mov	r1, r2
 80042ac:	4b3b      	ldr	r3, [pc, #236]	; (800439c <UART_SetConfig+0x2d4>)
 80042ae:	fba3 2301 	umull	r2, r3, r3, r1
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2264      	movs	r2, #100	; 0x64
 80042b6:	fb02 f303 	mul.w	r3, r2, r3
 80042ba:	1acb      	subs	r3, r1, r3
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80042c2:	4b36      	ldr	r3, [pc, #216]	; (800439c <UART_SetConfig+0x2d4>)
 80042c4:	fba3 2302 	umull	r2, r3, r3, r2
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80042d0:	441c      	add	r4, r3
 80042d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80042e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80042e4:	4642      	mov	r2, r8
 80042e6:	464b      	mov	r3, r9
 80042e8:	1891      	adds	r1, r2, r2
 80042ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80042ec:	415b      	adcs	r3, r3
 80042ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042f4:	4641      	mov	r1, r8
 80042f6:	1851      	adds	r1, r2, r1
 80042f8:	6339      	str	r1, [r7, #48]	; 0x30
 80042fa:	4649      	mov	r1, r9
 80042fc:	414b      	adcs	r3, r1
 80042fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800430c:	4659      	mov	r1, fp
 800430e:	00cb      	lsls	r3, r1, #3
 8004310:	4651      	mov	r1, sl
 8004312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004316:	4651      	mov	r1, sl
 8004318:	00ca      	lsls	r2, r1, #3
 800431a:	4610      	mov	r0, r2
 800431c:	4619      	mov	r1, r3
 800431e:	4603      	mov	r3, r0
 8004320:	4642      	mov	r2, r8
 8004322:	189b      	adds	r3, r3, r2
 8004324:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004328:	464b      	mov	r3, r9
 800432a:	460a      	mov	r2, r1
 800432c:	eb42 0303 	adc.w	r3, r2, r3
 8004330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004340:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004344:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004348:	460b      	mov	r3, r1
 800434a:	18db      	adds	r3, r3, r3
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
 800434e:	4613      	mov	r3, r2
 8004350:	eb42 0303 	adc.w	r3, r2, r3
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004356:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800435a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800435e:	f7fc fb85 	bl	8000a6c <__aeabi_uldivmod>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4b0d      	ldr	r3, [pc, #52]	; (800439c <UART_SetConfig+0x2d4>)
 8004368:	fba3 1302 	umull	r1, r3, r3, r2
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	2164      	movs	r1, #100	; 0x64
 8004370:	fb01 f303 	mul.w	r3, r1, r3
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	3332      	adds	r3, #50	; 0x32
 800437a:	4a08      	ldr	r2, [pc, #32]	; (800439c <UART_SetConfig+0x2d4>)
 800437c:	fba2 2303 	umull	r2, r3, r2, r3
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	f003 0207 	and.w	r2, r3, #7
 8004386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4422      	add	r2, r4
 800438e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004390:	e105      	b.n	800459e <UART_SetConfig+0x4d6>
 8004392:	bf00      	nop
 8004394:	40011000 	.word	0x40011000
 8004398:	40011400 	.word	0x40011400
 800439c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043a4:	2200      	movs	r2, #0
 80043a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80043aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80043ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80043b2:	4642      	mov	r2, r8
 80043b4:	464b      	mov	r3, r9
 80043b6:	1891      	adds	r1, r2, r2
 80043b8:	6239      	str	r1, [r7, #32]
 80043ba:	415b      	adcs	r3, r3
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
 80043be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80043c2:	4641      	mov	r1, r8
 80043c4:	1854      	adds	r4, r2, r1
 80043c6:	4649      	mov	r1, r9
 80043c8:	eb43 0501 	adc.w	r5, r3, r1
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	00eb      	lsls	r3, r5, #3
 80043d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043da:	00e2      	lsls	r2, r4, #3
 80043dc:	4614      	mov	r4, r2
 80043de:	461d      	mov	r5, r3
 80043e0:	4643      	mov	r3, r8
 80043e2:	18e3      	adds	r3, r4, r3
 80043e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80043e8:	464b      	mov	r3, r9
 80043ea:	eb45 0303 	adc.w	r3, r5, r3
 80043ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800440e:	4629      	mov	r1, r5
 8004410:	008b      	lsls	r3, r1, #2
 8004412:	4621      	mov	r1, r4
 8004414:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004418:	4621      	mov	r1, r4
 800441a:	008a      	lsls	r2, r1, #2
 800441c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004420:	f7fc fb24 	bl	8000a6c <__aeabi_uldivmod>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4b60      	ldr	r3, [pc, #384]	; (80045ac <UART_SetConfig+0x4e4>)
 800442a:	fba3 2302 	umull	r2, r3, r3, r2
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	011c      	lsls	r4, r3, #4
 8004432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004436:	2200      	movs	r2, #0
 8004438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800443c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004440:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004444:	4642      	mov	r2, r8
 8004446:	464b      	mov	r3, r9
 8004448:	1891      	adds	r1, r2, r2
 800444a:	61b9      	str	r1, [r7, #24]
 800444c:	415b      	adcs	r3, r3
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004454:	4641      	mov	r1, r8
 8004456:	1851      	adds	r1, r2, r1
 8004458:	6139      	str	r1, [r7, #16]
 800445a:	4649      	mov	r1, r9
 800445c:	414b      	adcs	r3, r1
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800446c:	4659      	mov	r1, fp
 800446e:	00cb      	lsls	r3, r1, #3
 8004470:	4651      	mov	r1, sl
 8004472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004476:	4651      	mov	r1, sl
 8004478:	00ca      	lsls	r2, r1, #3
 800447a:	4610      	mov	r0, r2
 800447c:	4619      	mov	r1, r3
 800447e:	4603      	mov	r3, r0
 8004480:	4642      	mov	r2, r8
 8004482:	189b      	adds	r3, r3, r2
 8004484:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004488:	464b      	mov	r3, r9
 800448a:	460a      	mov	r2, r1
 800448c:	eb42 0303 	adc.w	r3, r2, r3
 8004490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	67bb      	str	r3, [r7, #120]	; 0x78
 800449e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80044ac:	4649      	mov	r1, r9
 80044ae:	008b      	lsls	r3, r1, #2
 80044b0:	4641      	mov	r1, r8
 80044b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b6:	4641      	mov	r1, r8
 80044b8:	008a      	lsls	r2, r1, #2
 80044ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80044be:	f7fc fad5 	bl	8000a6c <__aeabi_uldivmod>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4b39      	ldr	r3, [pc, #228]	; (80045ac <UART_SetConfig+0x4e4>)
 80044c8:	fba3 1302 	umull	r1, r3, r3, r2
 80044cc:	095b      	lsrs	r3, r3, #5
 80044ce:	2164      	movs	r1, #100	; 0x64
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	3332      	adds	r3, #50	; 0x32
 80044da:	4a34      	ldr	r2, [pc, #208]	; (80045ac <UART_SetConfig+0x4e4>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e6:	441c      	add	r4, r3
 80044e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ec:	2200      	movs	r2, #0
 80044ee:	673b      	str	r3, [r7, #112]	; 0x70
 80044f0:	677a      	str	r2, [r7, #116]	; 0x74
 80044f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044f6:	4642      	mov	r2, r8
 80044f8:	464b      	mov	r3, r9
 80044fa:	1891      	adds	r1, r2, r2
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	415b      	adcs	r3, r3
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004506:	4641      	mov	r1, r8
 8004508:	1851      	adds	r1, r2, r1
 800450a:	6039      	str	r1, [r7, #0]
 800450c:	4649      	mov	r1, r9
 800450e:	414b      	adcs	r3, r1
 8004510:	607b      	str	r3, [r7, #4]
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800451e:	4659      	mov	r1, fp
 8004520:	00cb      	lsls	r3, r1, #3
 8004522:	4651      	mov	r1, sl
 8004524:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004528:	4651      	mov	r1, sl
 800452a:	00ca      	lsls	r2, r1, #3
 800452c:	4610      	mov	r0, r2
 800452e:	4619      	mov	r1, r3
 8004530:	4603      	mov	r3, r0
 8004532:	4642      	mov	r2, r8
 8004534:	189b      	adds	r3, r3, r2
 8004536:	66bb      	str	r3, [r7, #104]	; 0x68
 8004538:	464b      	mov	r3, r9
 800453a:	460a      	mov	r2, r1
 800453c:	eb42 0303 	adc.w	r3, r2, r3
 8004540:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	663b      	str	r3, [r7, #96]	; 0x60
 800454c:	667a      	str	r2, [r7, #100]	; 0x64
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800455a:	4649      	mov	r1, r9
 800455c:	008b      	lsls	r3, r1, #2
 800455e:	4641      	mov	r1, r8
 8004560:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004564:	4641      	mov	r1, r8
 8004566:	008a      	lsls	r2, r1, #2
 8004568:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800456c:	f7fc fa7e 	bl	8000a6c <__aeabi_uldivmod>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <UART_SetConfig+0x4e4>)
 8004576:	fba3 1302 	umull	r1, r3, r3, r2
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	2164      	movs	r1, #100	; 0x64
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	3332      	adds	r3, #50	; 0x32
 8004588:	4a08      	ldr	r2, [pc, #32]	; (80045ac <UART_SetConfig+0x4e4>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	095b      	lsrs	r3, r3, #5
 8004590:	f003 020f 	and.w	r2, r3, #15
 8004594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4422      	add	r2, r4
 800459c:	609a      	str	r2, [r3, #8]
}
 800459e:	bf00      	nop
 80045a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80045a4:	46bd      	mov	sp, r7
 80045a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045aa:	bf00      	nop
 80045ac:	51eb851f 	.word	0x51eb851f

080045b0 <__errno>:
 80045b0:	4b01      	ldr	r3, [pc, #4]	; (80045b8 <__errno+0x8>)
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000014 	.word	0x20000014

080045bc <__libc_init_array>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	4d0d      	ldr	r5, [pc, #52]	; (80045f4 <__libc_init_array+0x38>)
 80045c0:	4c0d      	ldr	r4, [pc, #52]	; (80045f8 <__libc_init_array+0x3c>)
 80045c2:	1b64      	subs	r4, r4, r5
 80045c4:	10a4      	asrs	r4, r4, #2
 80045c6:	2600      	movs	r6, #0
 80045c8:	42a6      	cmp	r6, r4
 80045ca:	d109      	bne.n	80045e0 <__libc_init_array+0x24>
 80045cc:	4d0b      	ldr	r5, [pc, #44]	; (80045fc <__libc_init_array+0x40>)
 80045ce:	4c0c      	ldr	r4, [pc, #48]	; (8004600 <__libc_init_array+0x44>)
 80045d0:	f000 fc8e 	bl	8004ef0 <_init>
 80045d4:	1b64      	subs	r4, r4, r5
 80045d6:	10a4      	asrs	r4, r4, #2
 80045d8:	2600      	movs	r6, #0
 80045da:	42a6      	cmp	r6, r4
 80045dc:	d105      	bne.n	80045ea <__libc_init_array+0x2e>
 80045de:	bd70      	pop	{r4, r5, r6, pc}
 80045e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e4:	4798      	blx	r3
 80045e6:	3601      	adds	r6, #1
 80045e8:	e7ee      	b.n	80045c8 <__libc_init_array+0xc>
 80045ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ee:	4798      	blx	r3
 80045f0:	3601      	adds	r6, #1
 80045f2:	e7f2      	b.n	80045da <__libc_init_array+0x1e>
 80045f4:	08005590 	.word	0x08005590
 80045f8:	08005590 	.word	0x08005590
 80045fc:	08005590 	.word	0x08005590
 8004600:	08005594 	.word	0x08005594

08004604 <memset>:
 8004604:	4402      	add	r2, r0
 8004606:	4603      	mov	r3, r0
 8004608:	4293      	cmp	r3, r2
 800460a:	d100      	bne.n	800460e <memset+0xa>
 800460c:	4770      	bx	lr
 800460e:	f803 1b01 	strb.w	r1, [r3], #1
 8004612:	e7f9      	b.n	8004608 <memset+0x4>

08004614 <siprintf>:
 8004614:	b40e      	push	{r1, r2, r3}
 8004616:	b500      	push	{lr}
 8004618:	b09c      	sub	sp, #112	; 0x70
 800461a:	ab1d      	add	r3, sp, #116	; 0x74
 800461c:	9002      	str	r0, [sp, #8]
 800461e:	9006      	str	r0, [sp, #24]
 8004620:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004624:	4809      	ldr	r0, [pc, #36]	; (800464c <siprintf+0x38>)
 8004626:	9107      	str	r1, [sp, #28]
 8004628:	9104      	str	r1, [sp, #16]
 800462a:	4909      	ldr	r1, [pc, #36]	; (8004650 <siprintf+0x3c>)
 800462c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004630:	9105      	str	r1, [sp, #20]
 8004632:	6800      	ldr	r0, [r0, #0]
 8004634:	9301      	str	r3, [sp, #4]
 8004636:	a902      	add	r1, sp, #8
 8004638:	f000 f868 	bl	800470c <_svfiprintf_r>
 800463c:	9b02      	ldr	r3, [sp, #8]
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	b01c      	add	sp, #112	; 0x70
 8004644:	f85d eb04 	ldr.w	lr, [sp], #4
 8004648:	b003      	add	sp, #12
 800464a:	4770      	bx	lr
 800464c:	20000014 	.word	0x20000014
 8004650:	ffff0208 	.word	0xffff0208

08004654 <__ssputs_r>:
 8004654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004658:	688e      	ldr	r6, [r1, #8]
 800465a:	429e      	cmp	r6, r3
 800465c:	4682      	mov	sl, r0
 800465e:	460c      	mov	r4, r1
 8004660:	4690      	mov	r8, r2
 8004662:	461f      	mov	r7, r3
 8004664:	d838      	bhi.n	80046d8 <__ssputs_r+0x84>
 8004666:	898a      	ldrh	r2, [r1, #12]
 8004668:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800466c:	d032      	beq.n	80046d4 <__ssputs_r+0x80>
 800466e:	6825      	ldr	r5, [r4, #0]
 8004670:	6909      	ldr	r1, [r1, #16]
 8004672:	eba5 0901 	sub.w	r9, r5, r1
 8004676:	6965      	ldr	r5, [r4, #20]
 8004678:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800467c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004680:	3301      	adds	r3, #1
 8004682:	444b      	add	r3, r9
 8004684:	106d      	asrs	r5, r5, #1
 8004686:	429d      	cmp	r5, r3
 8004688:	bf38      	it	cc
 800468a:	461d      	movcc	r5, r3
 800468c:	0553      	lsls	r3, r2, #21
 800468e:	d531      	bpl.n	80046f4 <__ssputs_r+0xa0>
 8004690:	4629      	mov	r1, r5
 8004692:	f000 fb63 	bl	8004d5c <_malloc_r>
 8004696:	4606      	mov	r6, r0
 8004698:	b950      	cbnz	r0, 80046b0 <__ssputs_r+0x5c>
 800469a:	230c      	movs	r3, #12
 800469c:	f8ca 3000 	str.w	r3, [sl]
 80046a0:	89a3      	ldrh	r3, [r4, #12]
 80046a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046a6:	81a3      	strh	r3, [r4, #12]
 80046a8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b0:	6921      	ldr	r1, [r4, #16]
 80046b2:	464a      	mov	r2, r9
 80046b4:	f000 fabe 	bl	8004c34 <memcpy>
 80046b8:	89a3      	ldrh	r3, [r4, #12]
 80046ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80046be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c2:	81a3      	strh	r3, [r4, #12]
 80046c4:	6126      	str	r6, [r4, #16]
 80046c6:	6165      	str	r5, [r4, #20]
 80046c8:	444e      	add	r6, r9
 80046ca:	eba5 0509 	sub.w	r5, r5, r9
 80046ce:	6026      	str	r6, [r4, #0]
 80046d0:	60a5      	str	r5, [r4, #8]
 80046d2:	463e      	mov	r6, r7
 80046d4:	42be      	cmp	r6, r7
 80046d6:	d900      	bls.n	80046da <__ssputs_r+0x86>
 80046d8:	463e      	mov	r6, r7
 80046da:	6820      	ldr	r0, [r4, #0]
 80046dc:	4632      	mov	r2, r6
 80046de:	4641      	mov	r1, r8
 80046e0:	f000 fab6 	bl	8004c50 <memmove>
 80046e4:	68a3      	ldr	r3, [r4, #8]
 80046e6:	1b9b      	subs	r3, r3, r6
 80046e8:	60a3      	str	r3, [r4, #8]
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	4433      	add	r3, r6
 80046ee:	6023      	str	r3, [r4, #0]
 80046f0:	2000      	movs	r0, #0
 80046f2:	e7db      	b.n	80046ac <__ssputs_r+0x58>
 80046f4:	462a      	mov	r2, r5
 80046f6:	f000 fba5 	bl	8004e44 <_realloc_r>
 80046fa:	4606      	mov	r6, r0
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d1e1      	bne.n	80046c4 <__ssputs_r+0x70>
 8004700:	6921      	ldr	r1, [r4, #16]
 8004702:	4650      	mov	r0, sl
 8004704:	f000 fabe 	bl	8004c84 <_free_r>
 8004708:	e7c7      	b.n	800469a <__ssputs_r+0x46>
	...

0800470c <_svfiprintf_r>:
 800470c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004710:	4698      	mov	r8, r3
 8004712:	898b      	ldrh	r3, [r1, #12]
 8004714:	061b      	lsls	r3, r3, #24
 8004716:	b09d      	sub	sp, #116	; 0x74
 8004718:	4607      	mov	r7, r0
 800471a:	460d      	mov	r5, r1
 800471c:	4614      	mov	r4, r2
 800471e:	d50e      	bpl.n	800473e <_svfiprintf_r+0x32>
 8004720:	690b      	ldr	r3, [r1, #16]
 8004722:	b963      	cbnz	r3, 800473e <_svfiprintf_r+0x32>
 8004724:	2140      	movs	r1, #64	; 0x40
 8004726:	f000 fb19 	bl	8004d5c <_malloc_r>
 800472a:	6028      	str	r0, [r5, #0]
 800472c:	6128      	str	r0, [r5, #16]
 800472e:	b920      	cbnz	r0, 800473a <_svfiprintf_r+0x2e>
 8004730:	230c      	movs	r3, #12
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	f04f 30ff 	mov.w	r0, #4294967295
 8004738:	e0d1      	b.n	80048de <_svfiprintf_r+0x1d2>
 800473a:	2340      	movs	r3, #64	; 0x40
 800473c:	616b      	str	r3, [r5, #20]
 800473e:	2300      	movs	r3, #0
 8004740:	9309      	str	r3, [sp, #36]	; 0x24
 8004742:	2320      	movs	r3, #32
 8004744:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004748:	f8cd 800c 	str.w	r8, [sp, #12]
 800474c:	2330      	movs	r3, #48	; 0x30
 800474e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80048f8 <_svfiprintf_r+0x1ec>
 8004752:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004756:	f04f 0901 	mov.w	r9, #1
 800475a:	4623      	mov	r3, r4
 800475c:	469a      	mov	sl, r3
 800475e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004762:	b10a      	cbz	r2, 8004768 <_svfiprintf_r+0x5c>
 8004764:	2a25      	cmp	r2, #37	; 0x25
 8004766:	d1f9      	bne.n	800475c <_svfiprintf_r+0x50>
 8004768:	ebba 0b04 	subs.w	fp, sl, r4
 800476c:	d00b      	beq.n	8004786 <_svfiprintf_r+0x7a>
 800476e:	465b      	mov	r3, fp
 8004770:	4622      	mov	r2, r4
 8004772:	4629      	mov	r1, r5
 8004774:	4638      	mov	r0, r7
 8004776:	f7ff ff6d 	bl	8004654 <__ssputs_r>
 800477a:	3001      	adds	r0, #1
 800477c:	f000 80aa 	beq.w	80048d4 <_svfiprintf_r+0x1c8>
 8004780:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004782:	445a      	add	r2, fp
 8004784:	9209      	str	r2, [sp, #36]	; 0x24
 8004786:	f89a 3000 	ldrb.w	r3, [sl]
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 80a2 	beq.w	80048d4 <_svfiprintf_r+0x1c8>
 8004790:	2300      	movs	r3, #0
 8004792:	f04f 32ff 	mov.w	r2, #4294967295
 8004796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800479a:	f10a 0a01 	add.w	sl, sl, #1
 800479e:	9304      	str	r3, [sp, #16]
 80047a0:	9307      	str	r3, [sp, #28]
 80047a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047a6:	931a      	str	r3, [sp, #104]	; 0x68
 80047a8:	4654      	mov	r4, sl
 80047aa:	2205      	movs	r2, #5
 80047ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047b0:	4851      	ldr	r0, [pc, #324]	; (80048f8 <_svfiprintf_r+0x1ec>)
 80047b2:	f7fb fd1d 	bl	80001f0 <memchr>
 80047b6:	9a04      	ldr	r2, [sp, #16]
 80047b8:	b9d8      	cbnz	r0, 80047f2 <_svfiprintf_r+0xe6>
 80047ba:	06d0      	lsls	r0, r2, #27
 80047bc:	bf44      	itt	mi
 80047be:	2320      	movmi	r3, #32
 80047c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047c4:	0711      	lsls	r1, r2, #28
 80047c6:	bf44      	itt	mi
 80047c8:	232b      	movmi	r3, #43	; 0x2b
 80047ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047ce:	f89a 3000 	ldrb.w	r3, [sl]
 80047d2:	2b2a      	cmp	r3, #42	; 0x2a
 80047d4:	d015      	beq.n	8004802 <_svfiprintf_r+0xf6>
 80047d6:	9a07      	ldr	r2, [sp, #28]
 80047d8:	4654      	mov	r4, sl
 80047da:	2000      	movs	r0, #0
 80047dc:	f04f 0c0a 	mov.w	ip, #10
 80047e0:	4621      	mov	r1, r4
 80047e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047e6:	3b30      	subs	r3, #48	; 0x30
 80047e8:	2b09      	cmp	r3, #9
 80047ea:	d94e      	bls.n	800488a <_svfiprintf_r+0x17e>
 80047ec:	b1b0      	cbz	r0, 800481c <_svfiprintf_r+0x110>
 80047ee:	9207      	str	r2, [sp, #28]
 80047f0:	e014      	b.n	800481c <_svfiprintf_r+0x110>
 80047f2:	eba0 0308 	sub.w	r3, r0, r8
 80047f6:	fa09 f303 	lsl.w	r3, r9, r3
 80047fa:	4313      	orrs	r3, r2
 80047fc:	9304      	str	r3, [sp, #16]
 80047fe:	46a2      	mov	sl, r4
 8004800:	e7d2      	b.n	80047a8 <_svfiprintf_r+0x9c>
 8004802:	9b03      	ldr	r3, [sp, #12]
 8004804:	1d19      	adds	r1, r3, #4
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	9103      	str	r1, [sp, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	bfbb      	ittet	lt
 800480e:	425b      	neglt	r3, r3
 8004810:	f042 0202 	orrlt.w	r2, r2, #2
 8004814:	9307      	strge	r3, [sp, #28]
 8004816:	9307      	strlt	r3, [sp, #28]
 8004818:	bfb8      	it	lt
 800481a:	9204      	strlt	r2, [sp, #16]
 800481c:	7823      	ldrb	r3, [r4, #0]
 800481e:	2b2e      	cmp	r3, #46	; 0x2e
 8004820:	d10c      	bne.n	800483c <_svfiprintf_r+0x130>
 8004822:	7863      	ldrb	r3, [r4, #1]
 8004824:	2b2a      	cmp	r3, #42	; 0x2a
 8004826:	d135      	bne.n	8004894 <_svfiprintf_r+0x188>
 8004828:	9b03      	ldr	r3, [sp, #12]
 800482a:	1d1a      	adds	r2, r3, #4
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	9203      	str	r2, [sp, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	bfb8      	it	lt
 8004834:	f04f 33ff 	movlt.w	r3, #4294967295
 8004838:	3402      	adds	r4, #2
 800483a:	9305      	str	r3, [sp, #20]
 800483c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004908 <_svfiprintf_r+0x1fc>
 8004840:	7821      	ldrb	r1, [r4, #0]
 8004842:	2203      	movs	r2, #3
 8004844:	4650      	mov	r0, sl
 8004846:	f7fb fcd3 	bl	80001f0 <memchr>
 800484a:	b140      	cbz	r0, 800485e <_svfiprintf_r+0x152>
 800484c:	2340      	movs	r3, #64	; 0x40
 800484e:	eba0 000a 	sub.w	r0, r0, sl
 8004852:	fa03 f000 	lsl.w	r0, r3, r0
 8004856:	9b04      	ldr	r3, [sp, #16]
 8004858:	4303      	orrs	r3, r0
 800485a:	3401      	adds	r4, #1
 800485c:	9304      	str	r3, [sp, #16]
 800485e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004862:	4826      	ldr	r0, [pc, #152]	; (80048fc <_svfiprintf_r+0x1f0>)
 8004864:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004868:	2206      	movs	r2, #6
 800486a:	f7fb fcc1 	bl	80001f0 <memchr>
 800486e:	2800      	cmp	r0, #0
 8004870:	d038      	beq.n	80048e4 <_svfiprintf_r+0x1d8>
 8004872:	4b23      	ldr	r3, [pc, #140]	; (8004900 <_svfiprintf_r+0x1f4>)
 8004874:	bb1b      	cbnz	r3, 80048be <_svfiprintf_r+0x1b2>
 8004876:	9b03      	ldr	r3, [sp, #12]
 8004878:	3307      	adds	r3, #7
 800487a:	f023 0307 	bic.w	r3, r3, #7
 800487e:	3308      	adds	r3, #8
 8004880:	9303      	str	r3, [sp, #12]
 8004882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004884:	4433      	add	r3, r6
 8004886:	9309      	str	r3, [sp, #36]	; 0x24
 8004888:	e767      	b.n	800475a <_svfiprintf_r+0x4e>
 800488a:	fb0c 3202 	mla	r2, ip, r2, r3
 800488e:	460c      	mov	r4, r1
 8004890:	2001      	movs	r0, #1
 8004892:	e7a5      	b.n	80047e0 <_svfiprintf_r+0xd4>
 8004894:	2300      	movs	r3, #0
 8004896:	3401      	adds	r4, #1
 8004898:	9305      	str	r3, [sp, #20]
 800489a:	4619      	mov	r1, r3
 800489c:	f04f 0c0a 	mov.w	ip, #10
 80048a0:	4620      	mov	r0, r4
 80048a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048a6:	3a30      	subs	r2, #48	; 0x30
 80048a8:	2a09      	cmp	r2, #9
 80048aa:	d903      	bls.n	80048b4 <_svfiprintf_r+0x1a8>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0c5      	beq.n	800483c <_svfiprintf_r+0x130>
 80048b0:	9105      	str	r1, [sp, #20]
 80048b2:	e7c3      	b.n	800483c <_svfiprintf_r+0x130>
 80048b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80048b8:	4604      	mov	r4, r0
 80048ba:	2301      	movs	r3, #1
 80048bc:	e7f0      	b.n	80048a0 <_svfiprintf_r+0x194>
 80048be:	ab03      	add	r3, sp, #12
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	462a      	mov	r2, r5
 80048c4:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <_svfiprintf_r+0x1f8>)
 80048c6:	a904      	add	r1, sp, #16
 80048c8:	4638      	mov	r0, r7
 80048ca:	f3af 8000 	nop.w
 80048ce:	1c42      	adds	r2, r0, #1
 80048d0:	4606      	mov	r6, r0
 80048d2:	d1d6      	bne.n	8004882 <_svfiprintf_r+0x176>
 80048d4:	89ab      	ldrh	r3, [r5, #12]
 80048d6:	065b      	lsls	r3, r3, #25
 80048d8:	f53f af2c 	bmi.w	8004734 <_svfiprintf_r+0x28>
 80048dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048de:	b01d      	add	sp, #116	; 0x74
 80048e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048e4:	ab03      	add	r3, sp, #12
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	462a      	mov	r2, r5
 80048ea:	4b06      	ldr	r3, [pc, #24]	; (8004904 <_svfiprintf_r+0x1f8>)
 80048ec:	a904      	add	r1, sp, #16
 80048ee:	4638      	mov	r0, r7
 80048f0:	f000 f87a 	bl	80049e8 <_printf_i>
 80048f4:	e7eb      	b.n	80048ce <_svfiprintf_r+0x1c2>
 80048f6:	bf00      	nop
 80048f8:	08005554 	.word	0x08005554
 80048fc:	0800555e 	.word	0x0800555e
 8004900:	00000000 	.word	0x00000000
 8004904:	08004655 	.word	0x08004655
 8004908:	0800555a 	.word	0x0800555a

0800490c <_printf_common>:
 800490c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004910:	4616      	mov	r6, r2
 8004912:	4699      	mov	r9, r3
 8004914:	688a      	ldr	r2, [r1, #8]
 8004916:	690b      	ldr	r3, [r1, #16]
 8004918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800491c:	4293      	cmp	r3, r2
 800491e:	bfb8      	it	lt
 8004920:	4613      	movlt	r3, r2
 8004922:	6033      	str	r3, [r6, #0]
 8004924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004928:	4607      	mov	r7, r0
 800492a:	460c      	mov	r4, r1
 800492c:	b10a      	cbz	r2, 8004932 <_printf_common+0x26>
 800492e:	3301      	adds	r3, #1
 8004930:	6033      	str	r3, [r6, #0]
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	0699      	lsls	r1, r3, #26
 8004936:	bf42      	ittt	mi
 8004938:	6833      	ldrmi	r3, [r6, #0]
 800493a:	3302      	addmi	r3, #2
 800493c:	6033      	strmi	r3, [r6, #0]
 800493e:	6825      	ldr	r5, [r4, #0]
 8004940:	f015 0506 	ands.w	r5, r5, #6
 8004944:	d106      	bne.n	8004954 <_printf_common+0x48>
 8004946:	f104 0a19 	add.w	sl, r4, #25
 800494a:	68e3      	ldr	r3, [r4, #12]
 800494c:	6832      	ldr	r2, [r6, #0]
 800494e:	1a9b      	subs	r3, r3, r2
 8004950:	42ab      	cmp	r3, r5
 8004952:	dc26      	bgt.n	80049a2 <_printf_common+0x96>
 8004954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004958:	1e13      	subs	r3, r2, #0
 800495a:	6822      	ldr	r2, [r4, #0]
 800495c:	bf18      	it	ne
 800495e:	2301      	movne	r3, #1
 8004960:	0692      	lsls	r2, r2, #26
 8004962:	d42b      	bmi.n	80049bc <_printf_common+0xb0>
 8004964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004968:	4649      	mov	r1, r9
 800496a:	4638      	mov	r0, r7
 800496c:	47c0      	blx	r8
 800496e:	3001      	adds	r0, #1
 8004970:	d01e      	beq.n	80049b0 <_printf_common+0xa4>
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	68e5      	ldr	r5, [r4, #12]
 8004976:	6832      	ldr	r2, [r6, #0]
 8004978:	f003 0306 	and.w	r3, r3, #6
 800497c:	2b04      	cmp	r3, #4
 800497e:	bf08      	it	eq
 8004980:	1aad      	subeq	r5, r5, r2
 8004982:	68a3      	ldr	r3, [r4, #8]
 8004984:	6922      	ldr	r2, [r4, #16]
 8004986:	bf0c      	ite	eq
 8004988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800498c:	2500      	movne	r5, #0
 800498e:	4293      	cmp	r3, r2
 8004990:	bfc4      	itt	gt
 8004992:	1a9b      	subgt	r3, r3, r2
 8004994:	18ed      	addgt	r5, r5, r3
 8004996:	2600      	movs	r6, #0
 8004998:	341a      	adds	r4, #26
 800499a:	42b5      	cmp	r5, r6
 800499c:	d11a      	bne.n	80049d4 <_printf_common+0xc8>
 800499e:	2000      	movs	r0, #0
 80049a0:	e008      	b.n	80049b4 <_printf_common+0xa8>
 80049a2:	2301      	movs	r3, #1
 80049a4:	4652      	mov	r2, sl
 80049a6:	4649      	mov	r1, r9
 80049a8:	4638      	mov	r0, r7
 80049aa:	47c0      	blx	r8
 80049ac:	3001      	adds	r0, #1
 80049ae:	d103      	bne.n	80049b8 <_printf_common+0xac>
 80049b0:	f04f 30ff 	mov.w	r0, #4294967295
 80049b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b8:	3501      	adds	r5, #1
 80049ba:	e7c6      	b.n	800494a <_printf_common+0x3e>
 80049bc:	18e1      	adds	r1, r4, r3
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	2030      	movs	r0, #48	; 0x30
 80049c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049c6:	4422      	add	r2, r4
 80049c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049d0:	3302      	adds	r3, #2
 80049d2:	e7c7      	b.n	8004964 <_printf_common+0x58>
 80049d4:	2301      	movs	r3, #1
 80049d6:	4622      	mov	r2, r4
 80049d8:	4649      	mov	r1, r9
 80049da:	4638      	mov	r0, r7
 80049dc:	47c0      	blx	r8
 80049de:	3001      	adds	r0, #1
 80049e0:	d0e6      	beq.n	80049b0 <_printf_common+0xa4>
 80049e2:	3601      	adds	r6, #1
 80049e4:	e7d9      	b.n	800499a <_printf_common+0x8e>
	...

080049e8 <_printf_i>:
 80049e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049ec:	7e0f      	ldrb	r7, [r1, #24]
 80049ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049f0:	2f78      	cmp	r7, #120	; 0x78
 80049f2:	4691      	mov	r9, r2
 80049f4:	4680      	mov	r8, r0
 80049f6:	460c      	mov	r4, r1
 80049f8:	469a      	mov	sl, r3
 80049fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049fe:	d807      	bhi.n	8004a10 <_printf_i+0x28>
 8004a00:	2f62      	cmp	r7, #98	; 0x62
 8004a02:	d80a      	bhi.n	8004a1a <_printf_i+0x32>
 8004a04:	2f00      	cmp	r7, #0
 8004a06:	f000 80d8 	beq.w	8004bba <_printf_i+0x1d2>
 8004a0a:	2f58      	cmp	r7, #88	; 0x58
 8004a0c:	f000 80a3 	beq.w	8004b56 <_printf_i+0x16e>
 8004a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a18:	e03a      	b.n	8004a90 <_printf_i+0xa8>
 8004a1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a1e:	2b15      	cmp	r3, #21
 8004a20:	d8f6      	bhi.n	8004a10 <_printf_i+0x28>
 8004a22:	a101      	add	r1, pc, #4	; (adr r1, 8004a28 <_printf_i+0x40>)
 8004a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a28:	08004a81 	.word	0x08004a81
 8004a2c:	08004a95 	.word	0x08004a95
 8004a30:	08004a11 	.word	0x08004a11
 8004a34:	08004a11 	.word	0x08004a11
 8004a38:	08004a11 	.word	0x08004a11
 8004a3c:	08004a11 	.word	0x08004a11
 8004a40:	08004a95 	.word	0x08004a95
 8004a44:	08004a11 	.word	0x08004a11
 8004a48:	08004a11 	.word	0x08004a11
 8004a4c:	08004a11 	.word	0x08004a11
 8004a50:	08004a11 	.word	0x08004a11
 8004a54:	08004ba1 	.word	0x08004ba1
 8004a58:	08004ac5 	.word	0x08004ac5
 8004a5c:	08004b83 	.word	0x08004b83
 8004a60:	08004a11 	.word	0x08004a11
 8004a64:	08004a11 	.word	0x08004a11
 8004a68:	08004bc3 	.word	0x08004bc3
 8004a6c:	08004a11 	.word	0x08004a11
 8004a70:	08004ac5 	.word	0x08004ac5
 8004a74:	08004a11 	.word	0x08004a11
 8004a78:	08004a11 	.word	0x08004a11
 8004a7c:	08004b8b 	.word	0x08004b8b
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	1d1a      	adds	r2, r3, #4
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	602a      	str	r2, [r5, #0]
 8004a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a90:	2301      	movs	r3, #1
 8004a92:	e0a3      	b.n	8004bdc <_printf_i+0x1f4>
 8004a94:	6820      	ldr	r0, [r4, #0]
 8004a96:	6829      	ldr	r1, [r5, #0]
 8004a98:	0606      	lsls	r6, r0, #24
 8004a9a:	f101 0304 	add.w	r3, r1, #4
 8004a9e:	d50a      	bpl.n	8004ab6 <_printf_i+0xce>
 8004aa0:	680e      	ldr	r6, [r1, #0]
 8004aa2:	602b      	str	r3, [r5, #0]
 8004aa4:	2e00      	cmp	r6, #0
 8004aa6:	da03      	bge.n	8004ab0 <_printf_i+0xc8>
 8004aa8:	232d      	movs	r3, #45	; 0x2d
 8004aaa:	4276      	negs	r6, r6
 8004aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ab0:	485e      	ldr	r0, [pc, #376]	; (8004c2c <_printf_i+0x244>)
 8004ab2:	230a      	movs	r3, #10
 8004ab4:	e019      	b.n	8004aea <_printf_i+0x102>
 8004ab6:	680e      	ldr	r6, [r1, #0]
 8004ab8:	602b      	str	r3, [r5, #0]
 8004aba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004abe:	bf18      	it	ne
 8004ac0:	b236      	sxthne	r6, r6
 8004ac2:	e7ef      	b.n	8004aa4 <_printf_i+0xbc>
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	6820      	ldr	r0, [r4, #0]
 8004ac8:	1d19      	adds	r1, r3, #4
 8004aca:	6029      	str	r1, [r5, #0]
 8004acc:	0601      	lsls	r1, r0, #24
 8004ace:	d501      	bpl.n	8004ad4 <_printf_i+0xec>
 8004ad0:	681e      	ldr	r6, [r3, #0]
 8004ad2:	e002      	b.n	8004ada <_printf_i+0xf2>
 8004ad4:	0646      	lsls	r6, r0, #25
 8004ad6:	d5fb      	bpl.n	8004ad0 <_printf_i+0xe8>
 8004ad8:	881e      	ldrh	r6, [r3, #0]
 8004ada:	4854      	ldr	r0, [pc, #336]	; (8004c2c <_printf_i+0x244>)
 8004adc:	2f6f      	cmp	r7, #111	; 0x6f
 8004ade:	bf0c      	ite	eq
 8004ae0:	2308      	moveq	r3, #8
 8004ae2:	230a      	movne	r3, #10
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aea:	6865      	ldr	r5, [r4, #4]
 8004aec:	60a5      	str	r5, [r4, #8]
 8004aee:	2d00      	cmp	r5, #0
 8004af0:	bfa2      	ittt	ge
 8004af2:	6821      	ldrge	r1, [r4, #0]
 8004af4:	f021 0104 	bicge.w	r1, r1, #4
 8004af8:	6021      	strge	r1, [r4, #0]
 8004afa:	b90e      	cbnz	r6, 8004b00 <_printf_i+0x118>
 8004afc:	2d00      	cmp	r5, #0
 8004afe:	d04d      	beq.n	8004b9c <_printf_i+0x1b4>
 8004b00:	4615      	mov	r5, r2
 8004b02:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b06:	fb03 6711 	mls	r7, r3, r1, r6
 8004b0a:	5dc7      	ldrb	r7, [r0, r7]
 8004b0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b10:	4637      	mov	r7, r6
 8004b12:	42bb      	cmp	r3, r7
 8004b14:	460e      	mov	r6, r1
 8004b16:	d9f4      	bls.n	8004b02 <_printf_i+0x11a>
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d10b      	bne.n	8004b34 <_printf_i+0x14c>
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	07de      	lsls	r6, r3, #31
 8004b20:	d508      	bpl.n	8004b34 <_printf_i+0x14c>
 8004b22:	6923      	ldr	r3, [r4, #16]
 8004b24:	6861      	ldr	r1, [r4, #4]
 8004b26:	4299      	cmp	r1, r3
 8004b28:	bfde      	ittt	le
 8004b2a:	2330      	movle	r3, #48	; 0x30
 8004b2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b34:	1b52      	subs	r2, r2, r5
 8004b36:	6122      	str	r2, [r4, #16]
 8004b38:	f8cd a000 	str.w	sl, [sp]
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	aa03      	add	r2, sp, #12
 8004b40:	4621      	mov	r1, r4
 8004b42:	4640      	mov	r0, r8
 8004b44:	f7ff fee2 	bl	800490c <_printf_common>
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d14c      	bne.n	8004be6 <_printf_i+0x1fe>
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b50:	b004      	add	sp, #16
 8004b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b56:	4835      	ldr	r0, [pc, #212]	; (8004c2c <_printf_i+0x244>)
 8004b58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b5c:	6829      	ldr	r1, [r5, #0]
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b64:	6029      	str	r1, [r5, #0]
 8004b66:	061d      	lsls	r5, r3, #24
 8004b68:	d514      	bpl.n	8004b94 <_printf_i+0x1ac>
 8004b6a:	07df      	lsls	r7, r3, #31
 8004b6c:	bf44      	itt	mi
 8004b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8004b72:	6023      	strmi	r3, [r4, #0]
 8004b74:	b91e      	cbnz	r6, 8004b7e <_printf_i+0x196>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	f023 0320 	bic.w	r3, r3, #32
 8004b7c:	6023      	str	r3, [r4, #0]
 8004b7e:	2310      	movs	r3, #16
 8004b80:	e7b0      	b.n	8004ae4 <_printf_i+0xfc>
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	f043 0320 	orr.w	r3, r3, #32
 8004b88:	6023      	str	r3, [r4, #0]
 8004b8a:	2378      	movs	r3, #120	; 0x78
 8004b8c:	4828      	ldr	r0, [pc, #160]	; (8004c30 <_printf_i+0x248>)
 8004b8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b92:	e7e3      	b.n	8004b5c <_printf_i+0x174>
 8004b94:	0659      	lsls	r1, r3, #25
 8004b96:	bf48      	it	mi
 8004b98:	b2b6      	uxthmi	r6, r6
 8004b9a:	e7e6      	b.n	8004b6a <_printf_i+0x182>
 8004b9c:	4615      	mov	r5, r2
 8004b9e:	e7bb      	b.n	8004b18 <_printf_i+0x130>
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	6826      	ldr	r6, [r4, #0]
 8004ba4:	6961      	ldr	r1, [r4, #20]
 8004ba6:	1d18      	adds	r0, r3, #4
 8004ba8:	6028      	str	r0, [r5, #0]
 8004baa:	0635      	lsls	r5, r6, #24
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	d501      	bpl.n	8004bb4 <_printf_i+0x1cc>
 8004bb0:	6019      	str	r1, [r3, #0]
 8004bb2:	e002      	b.n	8004bba <_printf_i+0x1d2>
 8004bb4:	0670      	lsls	r0, r6, #25
 8004bb6:	d5fb      	bpl.n	8004bb0 <_printf_i+0x1c8>
 8004bb8:	8019      	strh	r1, [r3, #0]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	6123      	str	r3, [r4, #16]
 8004bbe:	4615      	mov	r5, r2
 8004bc0:	e7ba      	b.n	8004b38 <_printf_i+0x150>
 8004bc2:	682b      	ldr	r3, [r5, #0]
 8004bc4:	1d1a      	adds	r2, r3, #4
 8004bc6:	602a      	str	r2, [r5, #0]
 8004bc8:	681d      	ldr	r5, [r3, #0]
 8004bca:	6862      	ldr	r2, [r4, #4]
 8004bcc:	2100      	movs	r1, #0
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f7fb fb0e 	bl	80001f0 <memchr>
 8004bd4:	b108      	cbz	r0, 8004bda <_printf_i+0x1f2>
 8004bd6:	1b40      	subs	r0, r0, r5
 8004bd8:	6060      	str	r0, [r4, #4]
 8004bda:	6863      	ldr	r3, [r4, #4]
 8004bdc:	6123      	str	r3, [r4, #16]
 8004bde:	2300      	movs	r3, #0
 8004be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be4:	e7a8      	b.n	8004b38 <_printf_i+0x150>
 8004be6:	6923      	ldr	r3, [r4, #16]
 8004be8:	462a      	mov	r2, r5
 8004bea:	4649      	mov	r1, r9
 8004bec:	4640      	mov	r0, r8
 8004bee:	47d0      	blx	sl
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	d0ab      	beq.n	8004b4c <_printf_i+0x164>
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	079b      	lsls	r3, r3, #30
 8004bf8:	d413      	bmi.n	8004c22 <_printf_i+0x23a>
 8004bfa:	68e0      	ldr	r0, [r4, #12]
 8004bfc:	9b03      	ldr	r3, [sp, #12]
 8004bfe:	4298      	cmp	r0, r3
 8004c00:	bfb8      	it	lt
 8004c02:	4618      	movlt	r0, r3
 8004c04:	e7a4      	b.n	8004b50 <_printf_i+0x168>
 8004c06:	2301      	movs	r3, #1
 8004c08:	4632      	mov	r2, r6
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	4640      	mov	r0, r8
 8004c0e:	47d0      	blx	sl
 8004c10:	3001      	adds	r0, #1
 8004c12:	d09b      	beq.n	8004b4c <_printf_i+0x164>
 8004c14:	3501      	adds	r5, #1
 8004c16:	68e3      	ldr	r3, [r4, #12]
 8004c18:	9903      	ldr	r1, [sp, #12]
 8004c1a:	1a5b      	subs	r3, r3, r1
 8004c1c:	42ab      	cmp	r3, r5
 8004c1e:	dcf2      	bgt.n	8004c06 <_printf_i+0x21e>
 8004c20:	e7eb      	b.n	8004bfa <_printf_i+0x212>
 8004c22:	2500      	movs	r5, #0
 8004c24:	f104 0619 	add.w	r6, r4, #25
 8004c28:	e7f5      	b.n	8004c16 <_printf_i+0x22e>
 8004c2a:	bf00      	nop
 8004c2c:	08005565 	.word	0x08005565
 8004c30:	08005576 	.word	0x08005576

08004c34 <memcpy>:
 8004c34:	440a      	add	r2, r1
 8004c36:	4291      	cmp	r1, r2
 8004c38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c3c:	d100      	bne.n	8004c40 <memcpy+0xc>
 8004c3e:	4770      	bx	lr
 8004c40:	b510      	push	{r4, lr}
 8004c42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c4a:	4291      	cmp	r1, r2
 8004c4c:	d1f9      	bne.n	8004c42 <memcpy+0xe>
 8004c4e:	bd10      	pop	{r4, pc}

08004c50 <memmove>:
 8004c50:	4288      	cmp	r0, r1
 8004c52:	b510      	push	{r4, lr}
 8004c54:	eb01 0402 	add.w	r4, r1, r2
 8004c58:	d902      	bls.n	8004c60 <memmove+0x10>
 8004c5a:	4284      	cmp	r4, r0
 8004c5c:	4623      	mov	r3, r4
 8004c5e:	d807      	bhi.n	8004c70 <memmove+0x20>
 8004c60:	1e43      	subs	r3, r0, #1
 8004c62:	42a1      	cmp	r1, r4
 8004c64:	d008      	beq.n	8004c78 <memmove+0x28>
 8004c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c6e:	e7f8      	b.n	8004c62 <memmove+0x12>
 8004c70:	4402      	add	r2, r0
 8004c72:	4601      	mov	r1, r0
 8004c74:	428a      	cmp	r2, r1
 8004c76:	d100      	bne.n	8004c7a <memmove+0x2a>
 8004c78:	bd10      	pop	{r4, pc}
 8004c7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c82:	e7f7      	b.n	8004c74 <memmove+0x24>

08004c84 <_free_r>:
 8004c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c86:	2900      	cmp	r1, #0
 8004c88:	d044      	beq.n	8004d14 <_free_r+0x90>
 8004c8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c8e:	9001      	str	r0, [sp, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f1a1 0404 	sub.w	r4, r1, #4
 8004c96:	bfb8      	it	lt
 8004c98:	18e4      	addlt	r4, r4, r3
 8004c9a:	f000 f913 	bl	8004ec4 <__malloc_lock>
 8004c9e:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <_free_r+0x94>)
 8004ca0:	9801      	ldr	r0, [sp, #4]
 8004ca2:	6813      	ldr	r3, [r2, #0]
 8004ca4:	b933      	cbnz	r3, 8004cb4 <_free_r+0x30>
 8004ca6:	6063      	str	r3, [r4, #4]
 8004ca8:	6014      	str	r4, [r2, #0]
 8004caa:	b003      	add	sp, #12
 8004cac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cb0:	f000 b90e 	b.w	8004ed0 <__malloc_unlock>
 8004cb4:	42a3      	cmp	r3, r4
 8004cb6:	d908      	bls.n	8004cca <_free_r+0x46>
 8004cb8:	6825      	ldr	r5, [r4, #0]
 8004cba:	1961      	adds	r1, r4, r5
 8004cbc:	428b      	cmp	r3, r1
 8004cbe:	bf01      	itttt	eq
 8004cc0:	6819      	ldreq	r1, [r3, #0]
 8004cc2:	685b      	ldreq	r3, [r3, #4]
 8004cc4:	1949      	addeq	r1, r1, r5
 8004cc6:	6021      	streq	r1, [r4, #0]
 8004cc8:	e7ed      	b.n	8004ca6 <_free_r+0x22>
 8004cca:	461a      	mov	r2, r3
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	b10b      	cbz	r3, 8004cd4 <_free_r+0x50>
 8004cd0:	42a3      	cmp	r3, r4
 8004cd2:	d9fa      	bls.n	8004cca <_free_r+0x46>
 8004cd4:	6811      	ldr	r1, [r2, #0]
 8004cd6:	1855      	adds	r5, r2, r1
 8004cd8:	42a5      	cmp	r5, r4
 8004cda:	d10b      	bne.n	8004cf4 <_free_r+0x70>
 8004cdc:	6824      	ldr	r4, [r4, #0]
 8004cde:	4421      	add	r1, r4
 8004ce0:	1854      	adds	r4, r2, r1
 8004ce2:	42a3      	cmp	r3, r4
 8004ce4:	6011      	str	r1, [r2, #0]
 8004ce6:	d1e0      	bne.n	8004caa <_free_r+0x26>
 8004ce8:	681c      	ldr	r4, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	6053      	str	r3, [r2, #4]
 8004cee:	4421      	add	r1, r4
 8004cf0:	6011      	str	r1, [r2, #0]
 8004cf2:	e7da      	b.n	8004caa <_free_r+0x26>
 8004cf4:	d902      	bls.n	8004cfc <_free_r+0x78>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	6003      	str	r3, [r0, #0]
 8004cfa:	e7d6      	b.n	8004caa <_free_r+0x26>
 8004cfc:	6825      	ldr	r5, [r4, #0]
 8004cfe:	1961      	adds	r1, r4, r5
 8004d00:	428b      	cmp	r3, r1
 8004d02:	bf04      	itt	eq
 8004d04:	6819      	ldreq	r1, [r3, #0]
 8004d06:	685b      	ldreq	r3, [r3, #4]
 8004d08:	6063      	str	r3, [r4, #4]
 8004d0a:	bf04      	itt	eq
 8004d0c:	1949      	addeq	r1, r1, r5
 8004d0e:	6021      	streq	r1, [r4, #0]
 8004d10:	6054      	str	r4, [r2, #4]
 8004d12:	e7ca      	b.n	8004caa <_free_r+0x26>
 8004d14:	b003      	add	sp, #12
 8004d16:	bd30      	pop	{r4, r5, pc}
 8004d18:	20000804 	.word	0x20000804

08004d1c <sbrk_aligned>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	4e0e      	ldr	r6, [pc, #56]	; (8004d58 <sbrk_aligned+0x3c>)
 8004d20:	460c      	mov	r4, r1
 8004d22:	6831      	ldr	r1, [r6, #0]
 8004d24:	4605      	mov	r5, r0
 8004d26:	b911      	cbnz	r1, 8004d2e <sbrk_aligned+0x12>
 8004d28:	f000 f8bc 	bl	8004ea4 <_sbrk_r>
 8004d2c:	6030      	str	r0, [r6, #0]
 8004d2e:	4621      	mov	r1, r4
 8004d30:	4628      	mov	r0, r5
 8004d32:	f000 f8b7 	bl	8004ea4 <_sbrk_r>
 8004d36:	1c43      	adds	r3, r0, #1
 8004d38:	d00a      	beq.n	8004d50 <sbrk_aligned+0x34>
 8004d3a:	1cc4      	adds	r4, r0, #3
 8004d3c:	f024 0403 	bic.w	r4, r4, #3
 8004d40:	42a0      	cmp	r0, r4
 8004d42:	d007      	beq.n	8004d54 <sbrk_aligned+0x38>
 8004d44:	1a21      	subs	r1, r4, r0
 8004d46:	4628      	mov	r0, r5
 8004d48:	f000 f8ac 	bl	8004ea4 <_sbrk_r>
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	d101      	bne.n	8004d54 <sbrk_aligned+0x38>
 8004d50:	f04f 34ff 	mov.w	r4, #4294967295
 8004d54:	4620      	mov	r0, r4
 8004d56:	bd70      	pop	{r4, r5, r6, pc}
 8004d58:	20000808 	.word	0x20000808

08004d5c <_malloc_r>:
 8004d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d60:	1ccd      	adds	r5, r1, #3
 8004d62:	f025 0503 	bic.w	r5, r5, #3
 8004d66:	3508      	adds	r5, #8
 8004d68:	2d0c      	cmp	r5, #12
 8004d6a:	bf38      	it	cc
 8004d6c:	250c      	movcc	r5, #12
 8004d6e:	2d00      	cmp	r5, #0
 8004d70:	4607      	mov	r7, r0
 8004d72:	db01      	blt.n	8004d78 <_malloc_r+0x1c>
 8004d74:	42a9      	cmp	r1, r5
 8004d76:	d905      	bls.n	8004d84 <_malloc_r+0x28>
 8004d78:	230c      	movs	r3, #12
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	2600      	movs	r6, #0
 8004d7e:	4630      	mov	r0, r6
 8004d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d84:	4e2e      	ldr	r6, [pc, #184]	; (8004e40 <_malloc_r+0xe4>)
 8004d86:	f000 f89d 	bl	8004ec4 <__malloc_lock>
 8004d8a:	6833      	ldr	r3, [r6, #0]
 8004d8c:	461c      	mov	r4, r3
 8004d8e:	bb34      	cbnz	r4, 8004dde <_malloc_r+0x82>
 8004d90:	4629      	mov	r1, r5
 8004d92:	4638      	mov	r0, r7
 8004d94:	f7ff ffc2 	bl	8004d1c <sbrk_aligned>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	4604      	mov	r4, r0
 8004d9c:	d14d      	bne.n	8004e3a <_malloc_r+0xde>
 8004d9e:	6834      	ldr	r4, [r6, #0]
 8004da0:	4626      	mov	r6, r4
 8004da2:	2e00      	cmp	r6, #0
 8004da4:	d140      	bne.n	8004e28 <_malloc_r+0xcc>
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	4631      	mov	r1, r6
 8004daa:	4638      	mov	r0, r7
 8004dac:	eb04 0803 	add.w	r8, r4, r3
 8004db0:	f000 f878 	bl	8004ea4 <_sbrk_r>
 8004db4:	4580      	cmp	r8, r0
 8004db6:	d13a      	bne.n	8004e2e <_malloc_r+0xd2>
 8004db8:	6821      	ldr	r1, [r4, #0]
 8004dba:	3503      	adds	r5, #3
 8004dbc:	1a6d      	subs	r5, r5, r1
 8004dbe:	f025 0503 	bic.w	r5, r5, #3
 8004dc2:	3508      	adds	r5, #8
 8004dc4:	2d0c      	cmp	r5, #12
 8004dc6:	bf38      	it	cc
 8004dc8:	250c      	movcc	r5, #12
 8004dca:	4629      	mov	r1, r5
 8004dcc:	4638      	mov	r0, r7
 8004dce:	f7ff ffa5 	bl	8004d1c <sbrk_aligned>
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	d02b      	beq.n	8004e2e <_malloc_r+0xd2>
 8004dd6:	6823      	ldr	r3, [r4, #0]
 8004dd8:	442b      	add	r3, r5
 8004dda:	6023      	str	r3, [r4, #0]
 8004ddc:	e00e      	b.n	8004dfc <_malloc_r+0xa0>
 8004dde:	6822      	ldr	r2, [r4, #0]
 8004de0:	1b52      	subs	r2, r2, r5
 8004de2:	d41e      	bmi.n	8004e22 <_malloc_r+0xc6>
 8004de4:	2a0b      	cmp	r2, #11
 8004de6:	d916      	bls.n	8004e16 <_malloc_r+0xba>
 8004de8:	1961      	adds	r1, r4, r5
 8004dea:	42a3      	cmp	r3, r4
 8004dec:	6025      	str	r5, [r4, #0]
 8004dee:	bf18      	it	ne
 8004df0:	6059      	strne	r1, [r3, #4]
 8004df2:	6863      	ldr	r3, [r4, #4]
 8004df4:	bf08      	it	eq
 8004df6:	6031      	streq	r1, [r6, #0]
 8004df8:	5162      	str	r2, [r4, r5]
 8004dfa:	604b      	str	r3, [r1, #4]
 8004dfc:	4638      	mov	r0, r7
 8004dfe:	f104 060b 	add.w	r6, r4, #11
 8004e02:	f000 f865 	bl	8004ed0 <__malloc_unlock>
 8004e06:	f026 0607 	bic.w	r6, r6, #7
 8004e0a:	1d23      	adds	r3, r4, #4
 8004e0c:	1af2      	subs	r2, r6, r3
 8004e0e:	d0b6      	beq.n	8004d7e <_malloc_r+0x22>
 8004e10:	1b9b      	subs	r3, r3, r6
 8004e12:	50a3      	str	r3, [r4, r2]
 8004e14:	e7b3      	b.n	8004d7e <_malloc_r+0x22>
 8004e16:	6862      	ldr	r2, [r4, #4]
 8004e18:	42a3      	cmp	r3, r4
 8004e1a:	bf0c      	ite	eq
 8004e1c:	6032      	streq	r2, [r6, #0]
 8004e1e:	605a      	strne	r2, [r3, #4]
 8004e20:	e7ec      	b.n	8004dfc <_malloc_r+0xa0>
 8004e22:	4623      	mov	r3, r4
 8004e24:	6864      	ldr	r4, [r4, #4]
 8004e26:	e7b2      	b.n	8004d8e <_malloc_r+0x32>
 8004e28:	4634      	mov	r4, r6
 8004e2a:	6876      	ldr	r6, [r6, #4]
 8004e2c:	e7b9      	b.n	8004da2 <_malloc_r+0x46>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	603b      	str	r3, [r7, #0]
 8004e32:	4638      	mov	r0, r7
 8004e34:	f000 f84c 	bl	8004ed0 <__malloc_unlock>
 8004e38:	e7a1      	b.n	8004d7e <_malloc_r+0x22>
 8004e3a:	6025      	str	r5, [r4, #0]
 8004e3c:	e7de      	b.n	8004dfc <_malloc_r+0xa0>
 8004e3e:	bf00      	nop
 8004e40:	20000804 	.word	0x20000804

08004e44 <_realloc_r>:
 8004e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e48:	4680      	mov	r8, r0
 8004e4a:	4614      	mov	r4, r2
 8004e4c:	460e      	mov	r6, r1
 8004e4e:	b921      	cbnz	r1, 8004e5a <_realloc_r+0x16>
 8004e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e54:	4611      	mov	r1, r2
 8004e56:	f7ff bf81 	b.w	8004d5c <_malloc_r>
 8004e5a:	b92a      	cbnz	r2, 8004e68 <_realloc_r+0x24>
 8004e5c:	f7ff ff12 	bl	8004c84 <_free_r>
 8004e60:	4625      	mov	r5, r4
 8004e62:	4628      	mov	r0, r5
 8004e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e68:	f000 f838 	bl	8004edc <_malloc_usable_size_r>
 8004e6c:	4284      	cmp	r4, r0
 8004e6e:	4607      	mov	r7, r0
 8004e70:	d802      	bhi.n	8004e78 <_realloc_r+0x34>
 8004e72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e76:	d812      	bhi.n	8004e9e <_realloc_r+0x5a>
 8004e78:	4621      	mov	r1, r4
 8004e7a:	4640      	mov	r0, r8
 8004e7c:	f7ff ff6e 	bl	8004d5c <_malloc_r>
 8004e80:	4605      	mov	r5, r0
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d0ed      	beq.n	8004e62 <_realloc_r+0x1e>
 8004e86:	42bc      	cmp	r4, r7
 8004e88:	4622      	mov	r2, r4
 8004e8a:	4631      	mov	r1, r6
 8004e8c:	bf28      	it	cs
 8004e8e:	463a      	movcs	r2, r7
 8004e90:	f7ff fed0 	bl	8004c34 <memcpy>
 8004e94:	4631      	mov	r1, r6
 8004e96:	4640      	mov	r0, r8
 8004e98:	f7ff fef4 	bl	8004c84 <_free_r>
 8004e9c:	e7e1      	b.n	8004e62 <_realloc_r+0x1e>
 8004e9e:	4635      	mov	r5, r6
 8004ea0:	e7df      	b.n	8004e62 <_realloc_r+0x1e>
	...

08004ea4 <_sbrk_r>:
 8004ea4:	b538      	push	{r3, r4, r5, lr}
 8004ea6:	4d06      	ldr	r5, [pc, #24]	; (8004ec0 <_sbrk_r+0x1c>)
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	4604      	mov	r4, r0
 8004eac:	4608      	mov	r0, r1
 8004eae:	602b      	str	r3, [r5, #0]
 8004eb0:	f7fc fc38 	bl	8001724 <_sbrk>
 8004eb4:	1c43      	adds	r3, r0, #1
 8004eb6:	d102      	bne.n	8004ebe <_sbrk_r+0x1a>
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	b103      	cbz	r3, 8004ebe <_sbrk_r+0x1a>
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	2000080c 	.word	0x2000080c

08004ec4 <__malloc_lock>:
 8004ec4:	4801      	ldr	r0, [pc, #4]	; (8004ecc <__malloc_lock+0x8>)
 8004ec6:	f000 b811 	b.w	8004eec <__retarget_lock_acquire_recursive>
 8004eca:	bf00      	nop
 8004ecc:	20000810 	.word	0x20000810

08004ed0 <__malloc_unlock>:
 8004ed0:	4801      	ldr	r0, [pc, #4]	; (8004ed8 <__malloc_unlock+0x8>)
 8004ed2:	f000 b80c 	b.w	8004eee <__retarget_lock_release_recursive>
 8004ed6:	bf00      	nop
 8004ed8:	20000810 	.word	0x20000810

08004edc <_malloc_usable_size_r>:
 8004edc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ee0:	1f18      	subs	r0, r3, #4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	bfbc      	itt	lt
 8004ee6:	580b      	ldrlt	r3, [r1, r0]
 8004ee8:	18c0      	addlt	r0, r0, r3
 8004eea:	4770      	bx	lr

08004eec <__retarget_lock_acquire_recursive>:
 8004eec:	4770      	bx	lr

08004eee <__retarget_lock_release_recursive>:
 8004eee:	4770      	bx	lr

08004ef0 <_init>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	bf00      	nop
 8004ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef6:	bc08      	pop	{r3}
 8004ef8:	469e      	mov	lr, r3
 8004efa:	4770      	bx	lr

08004efc <_fini>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	bf00      	nop
 8004f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f02:	bc08      	pop	{r3}
 8004f04:	469e      	mov	lr, r3
 8004f06:	4770      	bx	lr
